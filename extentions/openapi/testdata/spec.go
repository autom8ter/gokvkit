// Package testdata provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.1 DO NOT EDIT.
package testdata

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
