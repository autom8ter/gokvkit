// Package testdata provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.1 DO NOT EDIT.
package testdata

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"x6M1DY13ge3l4/8DAAD//3WCPnBwXQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
