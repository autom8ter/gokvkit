// Package testdata provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package testdata

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"gopkg.in/yaml.v2"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for CdcAction.
const (
	Create CdcAction = "create"
	Delete CdcAction = "delete"
	Set    CdcAction = "set"
	Update CdcAction = "update"
)

// Defines values for CdcDiffOp.
const (
	Add     CdcDiffOp = "add"
	Remove  CdcDiffOp = "remove"
	Replace CdcDiffOp = "replace"
)

// Defines values for CreateUserGender.
const (
	CreateUserGenderFemale CreateUserGender = "female"
	CreateUserGenderMale   CreateUserGender = "male"
)

// Defines values for OrderByDirection.
const (
	Asc  OrderByDirection = "asc"
	Desc OrderByDirection = "desc"
)

// Defines values for SelectAggregate.
const (
	Count SelectAggregate = "count"
	Max   SelectAggregate = "max"
	Min   SelectAggregate = "min"
	Sum   SelectAggregate = "sum"
)

// Defines values for SelectFunction.
const (
	ToLower SelectFunction = "toLower"
	ToUpper SelectFunction = "toUpper"
)

// Defines values for UserGender.
const (
	UserGenderFemale UserGender = "female"
	UserGenderMale   UserGender = "male"
)

// Defines values for WhereOp.
const (
	Contains WhereOp = "contains"
	Eq       WhereOp = "eq"
	Gt       WhereOp = "gt"
	Gte      WhereOp = "gte"
	In       WhereOp = "in"
	Lt       WhereOp = "lt"
	Lte      WhereOp = "lte"
	Neq      WhereOp = "neq"
)

// Account defines model for Account.
type Account struct {
	// Id The account's id.
	Id string `json:"_id"`

	// Name The accounts's name.
	Name string `json:"name"`
}

// Cdc defines model for Cdc.
type Cdc struct {
	// Id The cdc entry id.
	Id string `json:"_id"`

	// Action The action taken upon the document
	Action CdcAction `json:"action"`

	// Collection The collection the document belongs to
	Collection string `json:"collection"`

	// Diff An array of changes made to a document
	Diff []struct {
		Op    *CdcDiffOp   `json:"op,omitempty"`
		Path  *string      `json:"path,omitempty"`
		Value *interface{} `json:"value,omitempty"`
	} `json:"diff"`

	// DocumentID The id of the document being changed
	DocumentID *string `json:"documentID,omitempty"`

	// Metadata The context metadata when the change was commited
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Timestamp The unix nanosecond timestamp when the change was commited
	Timestamp *int `json:"timestamp,omitempty"`
}

// CdcAction The action taken upon the document
type CdcAction string

// CdcDiffOp defines model for Cdc.Diff.Op.
type CdcDiffOp string

// CreateAccount defines model for CreateAccount.
type CreateAccount struct {
	// Id The account's id.
	Id *string `json:"_id,omitempty"`

	// Name The accounts's name.
	Name string `json:"name"`
}

// CreateTask defines model for CreateTask.
type CreateTask struct {
	// Id The user's id.
	Id *string `json:"_id,omitempty"`

	// Content The content of the task
	Content string `json:"content"`

	// User The id of the user who owns the task
	User string `json:"user"`
}

// CreateUser defines model for CreateUser.
type CreateUser struct {
	// Id The user's id.
	Id        *string `json:"_id,omitempty"`
	AccountId string  `json:"account_id"`

	// Age Age in years which must be equal to or greater than zero.
	Age         int                     `json:"age"`
	Annotations *map[string]interface{} `json:"annotations,omitempty"`
	Contact     struct {
		// Email The user's email.
		Email *string `json:"email,omitempty"`
	} `json:"contact"`

	// Gender The user's gender.
	Gender CreateUserGender `json:"gender"`

	// Language The user's first language.
	Language *string `json:"language,omitempty"`

	// Name The user's name.
	Name      string  `json:"name"`
	Timestamp *string `json:"timestamp,omitempty"`
}

// CreateUserGender The user's gender.
type CreateUserGender string

// Explain defines model for Explain.
type Explain struct {
	Collection *string `json:"collection,omitempty"`

	// Index index is the index the optimizer selected
	Index *struct {
		Fields     *[]string `json:"fields,omitempty"`
		ForeignKey *struct {
			Cascade    *bool   `json:"cascade,omitempty"`
			Collection *string `json:"collection,omitempty"`
		} `json:"foreign_key,omitempty"`
		Name    *string `json:"name,omitempty"`
		Primary *bool   `json:"primary,omitempty"`
		Unique  *bool   `json:"unique,omitempty"`
	} `json:"index,omitempty"`
	MatchedFields *[]string               `json:"matched_fields,omitempty"`
	MatchedValues *map[string]interface{} `json:"matched_values,omitempty"`
	Reverse       *bool                   `json:"reverse,omitempty"`
	SeekFields    *[]string               `json:"seek_fields,omitempty"`
	SeekValues    *map[string]interface{} `json:"seek_values,omitempty"`
}

// Migration defines model for Migration.
type Migration struct {
	// Id The migration's id
	Id string `json:"_id"`

	// Dirty Whether the migration failed or not
	Dirty bool `json:"dirty"`

	// Error An error message if one was encountered
	Error *string `json:"error,omitempty"`

	// Script The migration script's content
	Script string `json:"script"`

	// Timestamp The unix timestamp when the migration executed
	Timestamp int `json:"timestamp"`
}

// OrderBy orderBy orders results by a field and a direction
type OrderBy struct {
	Direction OrderByDirection `json:"direction"`
	Field     string           `json:"field"`
}

// OrderByDirection defines model for OrderBy.Direction.
type OrderByDirection string

// Page Page is a list of documents returned from a query
type Page struct {
	Count     int                      `json:"count"`
	Documents []map[string]interface{} `json:"documents"`
	NextPage  int                      `json:"next_page"`

	// PageStats PageStats is the execution stats of a query that returns a page
	PageStats *PageStats `json:"page_stats,omitempty"`
}

// PageStats PageStats is the execution stats of a query that returns a page
type PageStats struct {
	ExecutionTime *float32 `json:"execution_time,omitempty"`
	Explain       *Explain `json:"explain,omitempty"`
}

// Query defines model for Query.
type Query struct {
	GroupBy *[]string  `json:"groupBy,omitempty"`
	Limit   *int       `json:"limit,omitempty"`
	OrderBy *[]OrderBy `json:"orderBy,omitempty"`
	Page    *int       `json:"page,omitempty"`
	Select  *[]Select  `json:"select,omitempty"`
	Where   *[]Where   `json:"where,omitempty"`
}

// Select select is a list of fields to select from each record in the datbase(optional)
type Select struct {
	// Aggregate an aggregate function to apply against the field
	Aggregate *SelectAggregate `json:"aggregate,omitempty"`

	// As as is outputs the value of the field as an alias
	As *string `json:"as,omitempty"`

	// Field the select's field
	Field string `json:"field"`

	// Function a function to apply against the field
	Function *SelectFunction `json:"function,omitempty"`
}

// SelectAggregate an aggregate function to apply against the field
type SelectAggregate string

// SelectFunction a function to apply against the field
type SelectFunction string

// Task defines model for Task.
type Task struct {
	// Id The user's id.
	Id string `json:"_id"`

	// Content The content of the task
	Content string `json:"content"`

	// User The id of the user who owns the task
	User string `json:"user"`
}

// User defines model for User.
type User struct {
	// Id The user's id.
	Id        string `json:"_id"`
	AccountId string `json:"account_id"`

	// Age Age in years which must be equal to or greater than zero.
	Age         int                     `json:"age"`
	Annotations *map[string]interface{} `json:"annotations,omitempty"`
	Contact     struct {
		// Email The user's email.
		Email *string `json:"email,omitempty"`
	} `json:"contact"`

	// Gender The user's gender.
	Gender UserGender `json:"gender"`

	// Language The user's first language.
	Language *string `json:"language,omitempty"`

	// Name The user's name.
	Name      string  `json:"name"`
	Timestamp *string `json:"timestamp,omitempty"`
}

// UserGender The user's gender.
type UserGender string

// Where where is a list of conditions to filter records in the database(optional)
type Where struct {
	Field string      `json:"field"`
	Op    WhereOp     `json:"op"`
	Value interface{} `json:"value"`
}

// WhereOp defines model for Where.Op.
type WhereOp string

// DocID defines model for DocID.
type DocID = string

// ExplainParam defines model for ExplainParam.
type ExplainParam = bool

// BatchSetAccountJSONBody defines parameters for BatchSetAccount.
type BatchSetAccountJSONBody = []Account

// EditAccountJSONBody defines parameters for EditAccount.
type EditAccountJSONBody = map[string]interface{}

// QueryAccountParams defines parameters for QueryAccount.
type QueryAccountParams struct {
	// Explain explain the query
	Explain *ExplainParam `form:"explain,omitempty" json:"explain,omitempty"`
}

// QueryCdcParams defines parameters for QueryCdc.
type QueryCdcParams struct {
	// Explain explain the query
	Explain *ExplainParam `form:"explain,omitempty" json:"explain,omitempty"`
}

// QueryMigrationParams defines parameters for QueryMigration.
type QueryMigrationParams struct {
	// Explain explain the query
	Explain *ExplainParam `form:"explain,omitempty" json:"explain,omitempty"`
}

// BatchSetTaskJSONBody defines parameters for BatchSetTask.
type BatchSetTaskJSONBody = []Task

// EditTaskJSONBody defines parameters for EditTask.
type EditTaskJSONBody = map[string]interface{}

// QueryTaskParams defines parameters for QueryTask.
type QueryTaskParams struct {
	// Explain explain the query
	Explain *ExplainParam `form:"explain,omitempty" json:"explain,omitempty"`
}

// BatchSetUserJSONBody defines parameters for BatchSetUser.
type BatchSetUserJSONBody = []User

// EditUserJSONBody defines parameters for EditUser.
type EditUserJSONBody = map[string]interface{}

// QueryUserParams defines parameters for QueryUser.
type QueryUserParams struct {
	// Explain explain the query
	Explain *ExplainParam `form:"explain,omitempty" json:"explain,omitempty"`
}

// BatchSetAccountJSONRequestBody defines body for BatchSetAccount for application/json ContentType.
type BatchSetAccountJSONRequestBody = BatchSetAccountJSONBody

// CreateAccountJSONRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody = CreateAccount

// EditAccountJSONRequestBody defines body for EditAccount for application/json ContentType.
type EditAccountJSONRequestBody = EditAccountJSONBody

// SetAccountJSONRequestBody defines body for SetAccount for application/json ContentType.
type SetAccountJSONRequestBody = Account

// QueryAccountJSONRequestBody defines body for QueryAccount for application/json ContentType.
type QueryAccountJSONRequestBody = Query

// QueryCdcJSONRequestBody defines body for QueryCdc for application/json ContentType.
type QueryCdcJSONRequestBody = Query

// QueryMigrationJSONRequestBody defines body for QueryMigration for application/json ContentType.
type QueryMigrationJSONRequestBody = Query

// BatchSetTaskJSONRequestBody defines body for BatchSetTask for application/json ContentType.
type BatchSetTaskJSONRequestBody = BatchSetTaskJSONBody

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody = CreateTask

// EditTaskJSONRequestBody defines body for EditTask for application/json ContentType.
type EditTaskJSONRequestBody = EditTaskJSONBody

// SetTaskJSONRequestBody defines body for SetTask for application/json ContentType.
type SetTaskJSONRequestBody = Task

// QueryTaskJSONRequestBody defines body for QueryTask for application/json ContentType.
type QueryTaskJSONRequestBody = Query

// BatchSetUserJSONRequestBody defines body for BatchSetUser for application/json ContentType.
type BatchSetUserJSONRequestBody = BatchSetUserJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUser

// EditUserJSONRequestBody defines body for EditUser for application/json ContentType.
type EditUserJSONRequestBody = EditUserJSONBody

// SetUserJSONRequestBody defines body for SetUser for application/json ContentType.
type SetUserJSONRequestBody = User

// QueryUserJSONRequestBody defines body for QueryUser for application/json ContentType.
type QueryUserJSONRequestBody = Query

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BatchSetAccount request with any body
	BatchSetAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BatchSetAccount(ctx context.Context, body BatchSetAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAccount request with any body
	CreateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAccount(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAccount request
	DeleteAccount(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccount request
	GetAccount(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditAccount request with any body
	EditAccountWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditAccount(ctx context.Context, docID DocID, body EditAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetAccount request with any body
	SetAccountWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetAccount(ctx context.Context, docID DocID, body SetAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryAccount request with any body
	QueryAccountWithBody(ctx context.Context, params *QueryAccountParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryAccount(ctx context.Context, params *QueryAccountParams, body QueryAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountSchema request
	GetAccountSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetAccountSchema request with any body
	SetAccountSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCdc request
	GetCdc(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryCdc request with any body
	QueryCdcWithBody(ctx context.Context, params *QueryCdcParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryCdc(ctx context.Context, params *QueryCdcParams, body QueryCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCdcSchema request
	GetCdcSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMigration request
	GetMigration(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryMigration request with any body
	QueryMigrationWithBody(ctx context.Context, params *QueryMigrationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryMigration(ctx context.Context, params *QueryMigrationParams, body QueryMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMigrationSchema request
	GetMigrationSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BatchSetTask request with any body
	BatchSetTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BatchSetTask(ctx context.Context, body BatchSetTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTask request with any body
	CreateTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTask(ctx context.Context, body CreateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTask request
	DeleteTask(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTask request
	GetTask(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditTask request with any body
	EditTaskWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditTask(ctx context.Context, docID DocID, body EditTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetTask request with any body
	SetTaskWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetTask(ctx context.Context, docID DocID, body SetTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryTask request with any body
	QueryTaskWithBody(ctx context.Context, params *QueryTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryTask(ctx context.Context, params *QueryTaskParams, body QueryTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskSchema request
	GetTaskSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetTaskSchema request with any body
	SetTaskSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BatchSetUser request with any body
	BatchSetUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BatchSetUser(ctx context.Context, body BatchSetUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUser request with any body
	CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUser request
	DeleteUser(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditUser request with any body
	EditUserWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditUser(ctx context.Context, docID DocID, body EditUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetUser request with any body
	SetUserWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetUser(ctx context.Context, docID DocID, body SetUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryUser request with any body
	QueryUserWithBody(ctx context.Context, params *QueryUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryUser(ctx context.Context, params *QueryUserParams, body QueryUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserSchema request
	GetUserSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetUserSchema request with any body
	SetUserSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchemas request
	GetSchemas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSDK request
	GetSDK(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenapiJson request
	GetOpenapiJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenapiYaml request
	GetOpenapiYaml(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BatchSetAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchSetAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchSetAccount(ctx context.Context, body BatchSetAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchSetAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccount(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccount(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountRequest(c.Server, docID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccount(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountRequest(c.Server, docID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditAccountWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditAccountRequestWithBody(c.Server, docID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditAccount(ctx context.Context, docID DocID, body EditAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditAccountRequest(c.Server, docID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetAccountWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetAccountRequestWithBody(c.Server, docID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetAccount(ctx context.Context, docID DocID, body SetAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetAccountRequest(c.Server, docID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryAccountWithBody(ctx context.Context, params *QueryAccountParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryAccountRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryAccount(ctx context.Context, params *QueryAccountParams, body QueryAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryAccountRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetAccountSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetAccountSchemaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCdc(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCdcRequest(c.Server, docID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryCdcWithBody(ctx context.Context, params *QueryCdcParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryCdcRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryCdc(ctx context.Context, params *QueryCdcParams, body QueryCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryCdcRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCdcSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCdcSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMigration(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMigrationRequest(c.Server, docID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryMigrationWithBody(ctx context.Context, params *QueryMigrationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryMigrationRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryMigration(ctx context.Context, params *QueryMigrationParams, body QueryMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryMigrationRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMigrationSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMigrationSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchSetTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchSetTaskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchSetTask(ctx context.Context, body BatchSetTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchSetTaskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTaskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTask(ctx context.Context, body CreateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTaskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTask(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTaskRequest(c.Server, docID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTask(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskRequest(c.Server, docID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditTaskWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditTaskRequestWithBody(c.Server, docID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditTask(ctx context.Context, docID DocID, body EditTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditTaskRequest(c.Server, docID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetTaskWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetTaskRequestWithBody(c.Server, docID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetTask(ctx context.Context, docID DocID, body SetTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetTaskRequest(c.Server, docID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryTaskWithBody(ctx context.Context, params *QueryTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryTaskRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryTask(ctx context.Context, params *QueryTaskParams, body QueryTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryTaskRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetTaskSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetTaskSchemaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchSetUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchSetUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchSetUser(ctx context.Context, body BatchSetUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchSetUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUser(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequest(c.Server, docID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, docID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditUserWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditUserRequestWithBody(c.Server, docID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditUser(ctx context.Context, docID DocID, body EditUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditUserRequest(c.Server, docID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetUserWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetUserRequestWithBody(c.Server, docID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetUser(ctx context.Context, docID DocID, body SetUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetUserRequest(c.Server, docID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUserWithBody(ctx context.Context, params *QueryUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUserRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUser(ctx context.Context, params *QueryUserParams, body QueryUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUserRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetUserSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetUserSchemaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchemas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchemasRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSDK(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSDKRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenapiJson(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenapiJsonRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenapiYaml(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenapiYamlRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBatchSetAccountRequest calls the generic BatchSetAccount builder with application/json body
func NewBatchSetAccountRequest(server string, body BatchSetAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBatchSetAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewBatchSetAccountRequestWithBody generates requests for BatchSetAccount with any type of body
func NewBatchSetAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/account/batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateAccountRequest calls the generic CreateAccount builder with application/json body
func NewCreateAccountRequest(server string, body CreateAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAccountRequestWithBody generates requests for CreateAccount with any type of body
func NewCreateAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/account/docs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAccountRequest generates requests for DeleteAccount
func NewDeleteAccountRequest(server string, docID DocID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/account/docs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountRequest generates requests for GetAccount
func NewGetAccountRequest(server string, docID DocID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/account/docs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditAccountRequest calls the generic EditAccount builder with application/json body
func NewEditAccountRequest(server string, docID DocID, body EditAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditAccountRequestWithBody(server, docID, "application/json", bodyReader)
}

// NewEditAccountRequestWithBody generates requests for EditAccount with any type of body
func NewEditAccountRequestWithBody(server string, docID DocID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/account/docs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetAccountRequest calls the generic SetAccount builder with application/json body
func NewSetAccountRequest(server string, docID DocID, body SetAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetAccountRequestWithBody(server, docID, "application/json", bodyReader)
}

// NewSetAccountRequestWithBody generates requests for SetAccount with any type of body
func NewSetAccountRequestWithBody(server string, docID DocID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/account/docs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryAccountRequest calls the generic QueryAccount builder with application/json body
func NewQueryAccountRequest(server string, params *QueryAccountParams, body QueryAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryAccountRequestWithBody(server, params, "application/json", bodyReader)
}

// NewQueryAccountRequestWithBody generates requests for QueryAccount with any type of body
func NewQueryAccountRequestWithBody(server string, params *QueryAccountParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/account/query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Explain != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "explain", runtime.ParamLocationQuery, *params.Explain); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAccountSchemaRequest generates requests for GetAccountSchema
func NewGetAccountSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/account/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetAccountSchemaRequestWithBody generates requests for SetAccountSchema with any type of body
func NewSetAccountSchemaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/account/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCdcRequest generates requests for GetCdc
func NewGetCdcRequest(server string, docID DocID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/cdc/docs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryCdcRequest calls the generic QueryCdc builder with application/json body
func NewQueryCdcRequest(server string, params *QueryCdcParams, body QueryCdcJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryCdcRequestWithBody(server, params, "application/json", bodyReader)
}

// NewQueryCdcRequestWithBody generates requests for QueryCdc with any type of body
func NewQueryCdcRequestWithBody(server string, params *QueryCdcParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/cdc/query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Explain != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "explain", runtime.ParamLocationQuery, *params.Explain); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCdcSchemaRequest generates requests for GetCdcSchema
func NewGetCdcSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/cdc/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMigrationRequest generates requests for GetMigration
func NewGetMigrationRequest(server string, docID DocID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/migration/docs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryMigrationRequest calls the generic QueryMigration builder with application/json body
func NewQueryMigrationRequest(server string, params *QueryMigrationParams, body QueryMigrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryMigrationRequestWithBody(server, params, "application/json", bodyReader)
}

// NewQueryMigrationRequestWithBody generates requests for QueryMigration with any type of body
func NewQueryMigrationRequestWithBody(server string, params *QueryMigrationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/migration/query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Explain != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "explain", runtime.ParamLocationQuery, *params.Explain); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMigrationSchemaRequest generates requests for GetMigrationSchema
func NewGetMigrationSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/migration/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBatchSetTaskRequest calls the generic BatchSetTask builder with application/json body
func NewBatchSetTaskRequest(server string, body BatchSetTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBatchSetTaskRequestWithBody(server, "application/json", bodyReader)
}

// NewBatchSetTaskRequestWithBody generates requests for BatchSetTask with any type of body
func NewBatchSetTaskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/task/batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateTaskRequest calls the generic CreateTask builder with application/json body
func NewCreateTaskRequest(server string, body CreateTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTaskRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTaskRequestWithBody generates requests for CreateTask with any type of body
func NewCreateTaskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/task/docs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTaskRequest generates requests for DeleteTask
func NewDeleteTaskRequest(server string, docID DocID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/task/docs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskRequest generates requests for GetTask
func NewGetTaskRequest(server string, docID DocID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/task/docs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditTaskRequest calls the generic EditTask builder with application/json body
func NewEditTaskRequest(server string, docID DocID, body EditTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditTaskRequestWithBody(server, docID, "application/json", bodyReader)
}

// NewEditTaskRequestWithBody generates requests for EditTask with any type of body
func NewEditTaskRequestWithBody(server string, docID DocID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/task/docs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetTaskRequest calls the generic SetTask builder with application/json body
func NewSetTaskRequest(server string, docID DocID, body SetTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetTaskRequestWithBody(server, docID, "application/json", bodyReader)
}

// NewSetTaskRequestWithBody generates requests for SetTask with any type of body
func NewSetTaskRequestWithBody(server string, docID DocID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/task/docs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryTaskRequest calls the generic QueryTask builder with application/json body
func NewQueryTaskRequest(server string, params *QueryTaskParams, body QueryTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryTaskRequestWithBody(server, params, "application/json", bodyReader)
}

// NewQueryTaskRequestWithBody generates requests for QueryTask with any type of body
func NewQueryTaskRequestWithBody(server string, params *QueryTaskParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/task/query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Explain != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "explain", runtime.ParamLocationQuery, *params.Explain); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTaskSchemaRequest generates requests for GetTaskSchema
func NewGetTaskSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/task/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetTaskSchemaRequestWithBody generates requests for SetTaskSchema with any type of body
func NewSetTaskSchemaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/task/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBatchSetUserRequest calls the generic BatchSetUser builder with application/json body
func NewBatchSetUserRequest(server string, body BatchSetUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBatchSetUserRequestWithBody(server, "application/json", bodyReader)
}

// NewBatchSetUserRequestWithBody generates requests for BatchSetUser with any type of body
func NewBatchSetUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/user/batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateUserRequest calls the generic CreateUser builder with application/json body
func NewCreateUserRequest(server string, body CreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserRequestWithBody generates requests for CreateUser with any type of body
func NewCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/user/docs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserRequest generates requests for DeleteUser
func NewDeleteUserRequest(server string, docID DocID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/user/docs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, docID DocID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/user/docs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditUserRequest calls the generic EditUser builder with application/json body
func NewEditUserRequest(server string, docID DocID, body EditUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditUserRequestWithBody(server, docID, "application/json", bodyReader)
}

// NewEditUserRequestWithBody generates requests for EditUser with any type of body
func NewEditUserRequestWithBody(server string, docID DocID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/user/docs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetUserRequest calls the generic SetUser builder with application/json body
func NewSetUserRequest(server string, docID DocID, body SetUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetUserRequestWithBody(server, docID, "application/json", bodyReader)
}

// NewSetUserRequestWithBody generates requests for SetUser with any type of body
func NewSetUserRequestWithBody(server string, docID DocID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/user/docs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryUserRequest calls the generic QueryUser builder with application/json body
func NewQueryUserRequest(server string, params *QueryUserParams, body QueryUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryUserRequestWithBody(server, params, "application/json", bodyReader)
}

// NewQueryUserRequestWithBody generates requests for QueryUser with any type of body
func NewQueryUserRequestWithBody(server string, params *QueryUserParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/user/query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Explain != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "explain", runtime.ParamLocationQuery, *params.Explain); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserSchemaRequest generates requests for GetUserSchema
func NewGetUserSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/user/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetUserSchemaRequestWithBody generates requests for SetUserSchema with any type of body
func NewSetUserSchemaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/user/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSchemasRequest generates requests for GetSchemas
func NewGetSchemasRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSDKRequest generates requests for GetSDK
func NewGetSDKRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sdk")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOpenapiJsonRequest generates requests for GetOpenapiJson
func NewGetOpenapiJsonRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openapi.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOpenapiYamlRequest generates requests for GetOpenapiYaml
func NewGetOpenapiYamlRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/openapi.yaml")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BatchSetAccount request with any body
	BatchSetAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchSetAccountResponse, error)

	BatchSetAccountWithResponse(ctx context.Context, body BatchSetAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchSetAccountResponse, error)

	// CreateAccount request with any body
	CreateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error)

	CreateAccountWithResponse(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error)

	// DeleteAccount request
	DeleteAccountWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*DeleteAccountResponse, error)

	// GetAccount request
	GetAccountWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*GetAccountResponse, error)

	// EditAccount request with any body
	EditAccountWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditAccountResponse, error)

	EditAccountWithResponse(ctx context.Context, docID DocID, body EditAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*EditAccountResponse, error)

	// SetAccount request with any body
	SetAccountWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetAccountResponse, error)

	SetAccountWithResponse(ctx context.Context, docID DocID, body SetAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*SetAccountResponse, error)

	// QueryAccount request with any body
	QueryAccountWithBodyWithResponse(ctx context.Context, params *QueryAccountParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryAccountResponse, error)

	QueryAccountWithResponse(ctx context.Context, params *QueryAccountParams, body QueryAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryAccountResponse, error)

	// GetAccountSchema request
	GetAccountSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountSchemaResponse, error)

	// SetAccountSchema request with any body
	SetAccountSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetAccountSchemaResponse, error)

	// GetCdc request
	GetCdcWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*GetCdcResponse, error)

	// QueryCdc request with any body
	QueryCdcWithBodyWithResponse(ctx context.Context, params *QueryCdcParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryCdcResponse, error)

	QueryCdcWithResponse(ctx context.Context, params *QueryCdcParams, body QueryCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryCdcResponse, error)

	// GetCdcSchema request
	GetCdcSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCdcSchemaResponse, error)

	// GetMigration request
	GetMigrationWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*GetMigrationResponse, error)

	// QueryMigration request with any body
	QueryMigrationWithBodyWithResponse(ctx context.Context, params *QueryMigrationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryMigrationResponse, error)

	QueryMigrationWithResponse(ctx context.Context, params *QueryMigrationParams, body QueryMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryMigrationResponse, error)

	// GetMigrationSchema request
	GetMigrationSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMigrationSchemaResponse, error)

	// BatchSetTask request with any body
	BatchSetTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchSetTaskResponse, error)

	BatchSetTaskWithResponse(ctx context.Context, body BatchSetTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchSetTaskResponse, error)

	// CreateTask request with any body
	CreateTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTaskResponse, error)

	CreateTaskWithResponse(ctx context.Context, body CreateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTaskResponse, error)

	// DeleteTask request
	DeleteTaskWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*DeleteTaskResponse, error)

	// GetTask request
	GetTaskWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*GetTaskResponse, error)

	// EditTask request with any body
	EditTaskWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditTaskResponse, error)

	EditTaskWithResponse(ctx context.Context, docID DocID, body EditTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*EditTaskResponse, error)

	// SetTask request with any body
	SetTaskWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetTaskResponse, error)

	SetTaskWithResponse(ctx context.Context, docID DocID, body SetTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*SetTaskResponse, error)

	// QueryTask request with any body
	QueryTaskWithBodyWithResponse(ctx context.Context, params *QueryTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryTaskResponse, error)

	QueryTaskWithResponse(ctx context.Context, params *QueryTaskParams, body QueryTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryTaskResponse, error)

	// GetTaskSchema request
	GetTaskSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTaskSchemaResponse, error)

	// SetTaskSchema request with any body
	SetTaskSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetTaskSchemaResponse, error)

	// BatchSetUser request with any body
	BatchSetUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchSetUserResponse, error)

	BatchSetUserWithResponse(ctx context.Context, body BatchSetUserJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchSetUserResponse, error)

	// CreateUser request with any body
	CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	// DeleteUser request
	DeleteUserWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	// GetUser request
	GetUserWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// EditUser request with any body
	EditUserWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditUserResponse, error)

	EditUserWithResponse(ctx context.Context, docID DocID, body EditUserJSONRequestBody, reqEditors ...RequestEditorFn) (*EditUserResponse, error)

	// SetUser request with any body
	SetUserWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetUserResponse, error)

	SetUserWithResponse(ctx context.Context, docID DocID, body SetUserJSONRequestBody, reqEditors ...RequestEditorFn) (*SetUserResponse, error)

	// QueryUser request with any body
	QueryUserWithBodyWithResponse(ctx context.Context, params *QueryUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryUserResponse, error)

	QueryUserWithResponse(ctx context.Context, params *QueryUserParams, body QueryUserJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryUserResponse, error)

	// GetUserSchema request
	GetUserSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserSchemaResponse, error)

	// SetUserSchema request with any body
	SetUserSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetUserSchemaResponse, error)

	// GetSchemas request
	GetSchemasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSchemasResponse, error)

	// GetSDK request
	GetSDKWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSDKResponse, error)

	// GetOpenapiJson request
	GetOpenapiJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenapiJsonResponse, error)

	// GetOpenapiYaml request
	GetOpenapiYamlWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenapiYamlResponse, error)
}

type BatchSetAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BatchSetAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchSetAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r CreateAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r GetAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r EditAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r SetAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Page
}

// Status returns HTTPResponse.Status
func (r QueryAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	YAML200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetAccountSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetAccountSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	YAML200      *string
}

// Status returns HTTPResponse.Status
func (r SetAccountSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetAccountSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCdcResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cdc
}

// Status returns HTTPResponse.Status
func (r GetCdcResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCdcResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryCdcResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Page
}

// Status returns HTTPResponse.Status
func (r QueryCdcResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryCdcResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCdcSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	YAML200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetCdcSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCdcSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMigrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Migration
}

// Status returns HTTPResponse.Status
func (r GetMigrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMigrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryMigrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Page
}

// Status returns HTTPResponse.Status
func (r QueryMigrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryMigrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMigrationSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	YAML200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetMigrationSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMigrationSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BatchSetTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BatchSetTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchSetTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
}

// Status returns HTTPResponse.Status
func (r CreateTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
}

// Status returns HTTPResponse.Status
func (r GetTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
}

// Status returns HTTPResponse.Status
func (r EditTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
}

// Status returns HTTPResponse.Status
func (r SetTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Page
}

// Status returns HTTPResponse.Status
func (r QueryTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	YAML200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetTaskSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetTaskSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	YAML200      *string
}

// Status returns HTTPResponse.Status
func (r SetTaskSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetTaskSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BatchSetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BatchSetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchSetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r CreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r EditUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r SetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Page
}

// Status returns HTTPResponse.Status
func (r QueryUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	YAML200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetUserSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetUserSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	YAML200      *string
}

// Status returns HTTPResponse.Status
func (r SetUserSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetUserSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchemasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetSchemasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchemasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSDKResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetSDKResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSDKResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenapiJsonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetOpenapiJsonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenapiJsonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenapiYamlResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	YAML200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetOpenapiYamlResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenapiYamlResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BatchSetAccountWithBodyWithResponse request with arbitrary body returning *BatchSetAccountResponse
func (c *ClientWithResponses) BatchSetAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchSetAccountResponse, error) {
	rsp, err := c.BatchSetAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchSetAccountResponse(rsp)
}

func (c *ClientWithResponses) BatchSetAccountWithResponse(ctx context.Context, body BatchSetAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchSetAccountResponse, error) {
	rsp, err := c.BatchSetAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchSetAccountResponse(rsp)
}

// CreateAccountWithBodyWithResponse request with arbitrary body returning *CreateAccountResponse
func (c *ClientWithResponses) CreateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error) {
	rsp, err := c.CreateAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountResponse(rsp)
}

func (c *ClientWithResponses) CreateAccountWithResponse(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error) {
	rsp, err := c.CreateAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountResponse(rsp)
}

// DeleteAccountWithResponse request returning *DeleteAccountResponse
func (c *ClientWithResponses) DeleteAccountWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*DeleteAccountResponse, error) {
	rsp, err := c.DeleteAccount(ctx, docID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountResponse(rsp)
}

// GetAccountWithResponse request returning *GetAccountResponse
func (c *ClientWithResponses) GetAccountWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*GetAccountResponse, error) {
	rsp, err := c.GetAccount(ctx, docID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountResponse(rsp)
}

// EditAccountWithBodyWithResponse request with arbitrary body returning *EditAccountResponse
func (c *ClientWithResponses) EditAccountWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditAccountResponse, error) {
	rsp, err := c.EditAccountWithBody(ctx, docID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditAccountResponse(rsp)
}

func (c *ClientWithResponses) EditAccountWithResponse(ctx context.Context, docID DocID, body EditAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*EditAccountResponse, error) {
	rsp, err := c.EditAccount(ctx, docID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditAccountResponse(rsp)
}

// SetAccountWithBodyWithResponse request with arbitrary body returning *SetAccountResponse
func (c *ClientWithResponses) SetAccountWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetAccountResponse, error) {
	rsp, err := c.SetAccountWithBody(ctx, docID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetAccountResponse(rsp)
}

func (c *ClientWithResponses) SetAccountWithResponse(ctx context.Context, docID DocID, body SetAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*SetAccountResponse, error) {
	rsp, err := c.SetAccount(ctx, docID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetAccountResponse(rsp)
}

// QueryAccountWithBodyWithResponse request with arbitrary body returning *QueryAccountResponse
func (c *ClientWithResponses) QueryAccountWithBodyWithResponse(ctx context.Context, params *QueryAccountParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryAccountResponse, error) {
	rsp, err := c.QueryAccountWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryAccountResponse(rsp)
}

func (c *ClientWithResponses) QueryAccountWithResponse(ctx context.Context, params *QueryAccountParams, body QueryAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryAccountResponse, error) {
	rsp, err := c.QueryAccount(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryAccountResponse(rsp)
}

// GetAccountSchemaWithResponse request returning *GetAccountSchemaResponse
func (c *ClientWithResponses) GetAccountSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountSchemaResponse, error) {
	rsp, err := c.GetAccountSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountSchemaResponse(rsp)
}

// SetAccountSchemaWithBodyWithResponse request with arbitrary body returning *SetAccountSchemaResponse
func (c *ClientWithResponses) SetAccountSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetAccountSchemaResponse, error) {
	rsp, err := c.SetAccountSchemaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetAccountSchemaResponse(rsp)
}

// GetCdcWithResponse request returning *GetCdcResponse
func (c *ClientWithResponses) GetCdcWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*GetCdcResponse, error) {
	rsp, err := c.GetCdc(ctx, docID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCdcResponse(rsp)
}

// QueryCdcWithBodyWithResponse request with arbitrary body returning *QueryCdcResponse
func (c *ClientWithResponses) QueryCdcWithBodyWithResponse(ctx context.Context, params *QueryCdcParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryCdcResponse, error) {
	rsp, err := c.QueryCdcWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryCdcResponse(rsp)
}

func (c *ClientWithResponses) QueryCdcWithResponse(ctx context.Context, params *QueryCdcParams, body QueryCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryCdcResponse, error) {
	rsp, err := c.QueryCdc(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryCdcResponse(rsp)
}

// GetCdcSchemaWithResponse request returning *GetCdcSchemaResponse
func (c *ClientWithResponses) GetCdcSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCdcSchemaResponse, error) {
	rsp, err := c.GetCdcSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCdcSchemaResponse(rsp)
}

// GetMigrationWithResponse request returning *GetMigrationResponse
func (c *ClientWithResponses) GetMigrationWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*GetMigrationResponse, error) {
	rsp, err := c.GetMigration(ctx, docID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMigrationResponse(rsp)
}

// QueryMigrationWithBodyWithResponse request with arbitrary body returning *QueryMigrationResponse
func (c *ClientWithResponses) QueryMigrationWithBodyWithResponse(ctx context.Context, params *QueryMigrationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryMigrationResponse, error) {
	rsp, err := c.QueryMigrationWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryMigrationResponse(rsp)
}

func (c *ClientWithResponses) QueryMigrationWithResponse(ctx context.Context, params *QueryMigrationParams, body QueryMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryMigrationResponse, error) {
	rsp, err := c.QueryMigration(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryMigrationResponse(rsp)
}

// GetMigrationSchemaWithResponse request returning *GetMigrationSchemaResponse
func (c *ClientWithResponses) GetMigrationSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMigrationSchemaResponse, error) {
	rsp, err := c.GetMigrationSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMigrationSchemaResponse(rsp)
}

// BatchSetTaskWithBodyWithResponse request with arbitrary body returning *BatchSetTaskResponse
func (c *ClientWithResponses) BatchSetTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchSetTaskResponse, error) {
	rsp, err := c.BatchSetTaskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchSetTaskResponse(rsp)
}

func (c *ClientWithResponses) BatchSetTaskWithResponse(ctx context.Context, body BatchSetTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchSetTaskResponse, error) {
	rsp, err := c.BatchSetTask(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchSetTaskResponse(rsp)
}

// CreateTaskWithBodyWithResponse request with arbitrary body returning *CreateTaskResponse
func (c *ClientWithResponses) CreateTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTaskResponse, error) {
	rsp, err := c.CreateTaskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTaskResponse(rsp)
}

func (c *ClientWithResponses) CreateTaskWithResponse(ctx context.Context, body CreateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTaskResponse, error) {
	rsp, err := c.CreateTask(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTaskResponse(rsp)
}

// DeleteTaskWithResponse request returning *DeleteTaskResponse
func (c *ClientWithResponses) DeleteTaskWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*DeleteTaskResponse, error) {
	rsp, err := c.DeleteTask(ctx, docID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTaskResponse(rsp)
}

// GetTaskWithResponse request returning *GetTaskResponse
func (c *ClientWithResponses) GetTaskWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*GetTaskResponse, error) {
	rsp, err := c.GetTask(ctx, docID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskResponse(rsp)
}

// EditTaskWithBodyWithResponse request with arbitrary body returning *EditTaskResponse
func (c *ClientWithResponses) EditTaskWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditTaskResponse, error) {
	rsp, err := c.EditTaskWithBody(ctx, docID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditTaskResponse(rsp)
}

func (c *ClientWithResponses) EditTaskWithResponse(ctx context.Context, docID DocID, body EditTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*EditTaskResponse, error) {
	rsp, err := c.EditTask(ctx, docID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditTaskResponse(rsp)
}

// SetTaskWithBodyWithResponse request with arbitrary body returning *SetTaskResponse
func (c *ClientWithResponses) SetTaskWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetTaskResponse, error) {
	rsp, err := c.SetTaskWithBody(ctx, docID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetTaskResponse(rsp)
}

func (c *ClientWithResponses) SetTaskWithResponse(ctx context.Context, docID DocID, body SetTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*SetTaskResponse, error) {
	rsp, err := c.SetTask(ctx, docID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetTaskResponse(rsp)
}

// QueryTaskWithBodyWithResponse request with arbitrary body returning *QueryTaskResponse
func (c *ClientWithResponses) QueryTaskWithBodyWithResponse(ctx context.Context, params *QueryTaskParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryTaskResponse, error) {
	rsp, err := c.QueryTaskWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryTaskResponse(rsp)
}

func (c *ClientWithResponses) QueryTaskWithResponse(ctx context.Context, params *QueryTaskParams, body QueryTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryTaskResponse, error) {
	rsp, err := c.QueryTask(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryTaskResponse(rsp)
}

// GetTaskSchemaWithResponse request returning *GetTaskSchemaResponse
func (c *ClientWithResponses) GetTaskSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTaskSchemaResponse, error) {
	rsp, err := c.GetTaskSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskSchemaResponse(rsp)
}

// SetTaskSchemaWithBodyWithResponse request with arbitrary body returning *SetTaskSchemaResponse
func (c *ClientWithResponses) SetTaskSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetTaskSchemaResponse, error) {
	rsp, err := c.SetTaskSchemaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetTaskSchemaResponse(rsp)
}

// BatchSetUserWithBodyWithResponse request with arbitrary body returning *BatchSetUserResponse
func (c *ClientWithResponses) BatchSetUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchSetUserResponse, error) {
	rsp, err := c.BatchSetUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchSetUserResponse(rsp)
}

func (c *ClientWithResponses) BatchSetUserWithResponse(ctx context.Context, body BatchSetUserJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchSetUserResponse, error) {
	rsp, err := c.BatchSetUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchSetUserResponse(rsp)
}

// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *ClientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

func (c *ClientWithResponses) CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

// DeleteUserWithResponse request returning *DeleteUserResponse
func (c *ClientWithResponses) DeleteUserWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUser(ctx, docID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, docID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// EditUserWithBodyWithResponse request with arbitrary body returning *EditUserResponse
func (c *ClientWithResponses) EditUserWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditUserResponse, error) {
	rsp, err := c.EditUserWithBody(ctx, docID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditUserResponse(rsp)
}

func (c *ClientWithResponses) EditUserWithResponse(ctx context.Context, docID DocID, body EditUserJSONRequestBody, reqEditors ...RequestEditorFn) (*EditUserResponse, error) {
	rsp, err := c.EditUser(ctx, docID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditUserResponse(rsp)
}

// SetUserWithBodyWithResponse request with arbitrary body returning *SetUserResponse
func (c *ClientWithResponses) SetUserWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetUserResponse, error) {
	rsp, err := c.SetUserWithBody(ctx, docID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetUserResponse(rsp)
}

func (c *ClientWithResponses) SetUserWithResponse(ctx context.Context, docID DocID, body SetUserJSONRequestBody, reqEditors ...RequestEditorFn) (*SetUserResponse, error) {
	rsp, err := c.SetUser(ctx, docID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetUserResponse(rsp)
}

// QueryUserWithBodyWithResponse request with arbitrary body returning *QueryUserResponse
func (c *ClientWithResponses) QueryUserWithBodyWithResponse(ctx context.Context, params *QueryUserParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryUserResponse, error) {
	rsp, err := c.QueryUserWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUserResponse(rsp)
}

func (c *ClientWithResponses) QueryUserWithResponse(ctx context.Context, params *QueryUserParams, body QueryUserJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryUserResponse, error) {
	rsp, err := c.QueryUser(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUserResponse(rsp)
}

// GetUserSchemaWithResponse request returning *GetUserSchemaResponse
func (c *ClientWithResponses) GetUserSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserSchemaResponse, error) {
	rsp, err := c.GetUserSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserSchemaResponse(rsp)
}

// SetUserSchemaWithBodyWithResponse request with arbitrary body returning *SetUserSchemaResponse
func (c *ClientWithResponses) SetUserSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetUserSchemaResponse, error) {
	rsp, err := c.SetUserSchemaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetUserSchemaResponse(rsp)
}

// GetSchemasWithResponse request returning *GetSchemasResponse
func (c *ClientWithResponses) GetSchemasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSchemasResponse, error) {
	rsp, err := c.GetSchemas(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchemasResponse(rsp)
}

// GetSDKWithResponse request returning *GetSDKResponse
func (c *ClientWithResponses) GetSDKWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSDKResponse, error) {
	rsp, err := c.GetSDK(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSDKResponse(rsp)
}

// GetOpenapiJsonWithResponse request returning *GetOpenapiJsonResponse
func (c *ClientWithResponses) GetOpenapiJsonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenapiJsonResponse, error) {
	rsp, err := c.GetOpenapiJson(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenapiJsonResponse(rsp)
}

// GetOpenapiYamlWithResponse request returning *GetOpenapiYamlResponse
func (c *ClientWithResponses) GetOpenapiYamlWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenapiYamlResponse, error) {
	rsp, err := c.GetOpenapiYaml(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenapiYamlResponse(rsp)
}

// ParseBatchSetAccountResponse parses an HTTP response from a BatchSetAccountWithResponse call
func ParseBatchSetAccountResponse(rsp *http.Response) (*BatchSetAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchSetAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateAccountResponse parses an HTTP response from a CreateAccountWithResponse call
func ParseCreateAccountResponse(rsp *http.Response) (*CreateAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAccountResponse parses an HTTP response from a DeleteAccountWithResponse call
func ParseDeleteAccountResponse(rsp *http.Response) (*DeleteAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAccountResponse parses an HTTP response from a GetAccountWithResponse call
func ParseGetAccountResponse(rsp *http.Response) (*GetAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditAccountResponse parses an HTTP response from a EditAccountWithResponse call
func ParseEditAccountResponse(rsp *http.Response) (*EditAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSetAccountResponse parses an HTTP response from a SetAccountWithResponse call
func ParseSetAccountResponse(rsp *http.Response) (*SetAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQueryAccountResponse parses an HTTP response from a QueryAccountWithResponse call
func ParseQueryAccountResponse(rsp *http.Response) (*QueryAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Page
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAccountSchemaResponse parses an HTTP response from a GetAccountSchemaWithResponse call
func ParseGetAccountSchemaResponse(rsp *http.Response) (*GetAccountSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseSetAccountSchemaResponse parses an HTTP response from a SetAccountSchemaWithResponse call
func ParseSetAccountSchemaResponse(rsp *http.Response) (*SetAccountSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetAccountSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest string
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseGetCdcResponse parses an HTTP response from a GetCdcWithResponse call
func ParseGetCdcResponse(rsp *http.Response) (*GetCdcResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCdcResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cdc
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQueryCdcResponse parses an HTTP response from a QueryCdcWithResponse call
func ParseQueryCdcResponse(rsp *http.Response) (*QueryCdcResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryCdcResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Page
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCdcSchemaResponse parses an HTTP response from a GetCdcSchemaWithResponse call
func ParseGetCdcSchemaResponse(rsp *http.Response) (*GetCdcSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCdcSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseGetMigrationResponse parses an HTTP response from a GetMigrationWithResponse call
func ParseGetMigrationResponse(rsp *http.Response) (*GetMigrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMigrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Migration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQueryMigrationResponse parses an HTTP response from a QueryMigrationWithResponse call
func ParseQueryMigrationResponse(rsp *http.Response) (*QueryMigrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryMigrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Page
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMigrationSchemaResponse parses an HTTP response from a GetMigrationSchemaWithResponse call
func ParseGetMigrationSchemaResponse(rsp *http.Response) (*GetMigrationSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMigrationSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseBatchSetTaskResponse parses an HTTP response from a BatchSetTaskWithResponse call
func ParseBatchSetTaskResponse(rsp *http.Response) (*BatchSetTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchSetTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateTaskResponse parses an HTTP response from a CreateTaskWithResponse call
func ParseCreateTaskResponse(rsp *http.Response) (*CreateTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteTaskResponse parses an HTTP response from a DeleteTaskWithResponse call
func ParseDeleteTaskResponse(rsp *http.Response) (*DeleteTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTaskResponse parses an HTTP response from a GetTaskWithResponse call
func ParseGetTaskResponse(rsp *http.Response) (*GetTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditTaskResponse parses an HTTP response from a EditTaskWithResponse call
func ParseEditTaskResponse(rsp *http.Response) (*EditTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSetTaskResponse parses an HTTP response from a SetTaskWithResponse call
func ParseSetTaskResponse(rsp *http.Response) (*SetTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQueryTaskResponse parses an HTTP response from a QueryTaskWithResponse call
func ParseQueryTaskResponse(rsp *http.Response) (*QueryTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Page
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaskSchemaResponse parses an HTTP response from a GetTaskSchemaWithResponse call
func ParseGetTaskSchemaResponse(rsp *http.Response) (*GetTaskSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseSetTaskSchemaResponse parses an HTTP response from a SetTaskSchemaWithResponse call
func ParseSetTaskSchemaResponse(rsp *http.Response) (*SetTaskSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetTaskSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest string
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseBatchSetUserResponse parses an HTTP response from a BatchSetUserWithResponse call
func ParseBatchSetUserResponse(rsp *http.Response) (*BatchSetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchSetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func ParseCreateUserResponse(rsp *http.Response) (*CreateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserResponse parses an HTTP response from a DeleteUserWithResponse call
func ParseDeleteUserResponse(rsp *http.Response) (*DeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditUserResponse parses an HTTP response from a EditUserWithResponse call
func ParseEditUserResponse(rsp *http.Response) (*EditUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSetUserResponse parses an HTTP response from a SetUserWithResponse call
func ParseSetUserResponse(rsp *http.Response) (*SetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQueryUserResponse parses an HTTP response from a QueryUserWithResponse call
func ParseQueryUserResponse(rsp *http.Response) (*QueryUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Page
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserSchemaResponse parses an HTTP response from a GetUserSchemaWithResponse call
func ParseGetUserSchemaResponse(rsp *http.Response) (*GetUserSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseSetUserSchemaResponse parses an HTTP response from a SetUserSchemaWithResponse call
func ParseSetUserSchemaResponse(rsp *http.Response) (*SetUserSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetUserSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest string
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// ParseGetSchemasResponse parses an HTTP response from a GetSchemasWithResponse call
func ParseGetSchemasResponse(rsp *http.Response) (*GetSchemasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchemasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSDKResponse parses an HTTP response from a GetSDKWithResponse call
func ParseGetSDKResponse(rsp *http.Response) (*GetSDKResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSDKResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOpenapiJsonResponse parses an HTTP response from a GetOpenapiJsonWithResponse call
func ParseGetOpenapiJsonResponse(rsp *http.Response) (*GetOpenapiJsonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenapiJsonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetOpenapiYamlResponse parses an HTTP response from a GetOpenapiYamlWithResponse call
func ParseGetOpenapiYamlResponse(rsp *http.Response) (*GetOpenapiYamlResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenapiYamlResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "yaml") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := yaml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.YAML200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdbW/bOBL+K4TugLaAm2T39r7kW7YtitzeXntwi8VhtzAYcSxzI5EqSSXxFv7vBw6p",
	"N4uy5JekTpsvqW1RHM4zz7xwKLtfolhmuRQgjI7Ov0Q5VTQDAwrfvZbx5Wv7govoPMqpWUSTSNAMovOI",
	"4bVJpOBzwRWw6NyoAiaRjheQUXuTWeZ2oDaKiyRarSbRm7s8pVy8t0LsCAY6Vjw3XNr5wV0lZgHkcwFq",
	"GU2c4PKNl+zHRQFZV1KmQEW0stLcVVTkIo5lIQxqqGQOynDACzPOugv5sABC3R3PNOHsJJqsKTOJ7l7m",
	"imdULZ3eq3J1G+bSzzSxg7rT2dXWOP6Oq/ITfqrGyqs/ITYoOpZpCrGX4GePVpPoFYu3UDFmMQFh1HK0",
	"itTLDCtp3xBDr0GQIpfOjkzGRQbCLhtEkVnlYgXUQDSJipy5FwxSwBcaTEPhEpxJ1NQ3qEl1vSWUXEEq",
	"RaKJkUH1uGBwZ2es75+V9844w0uUMW4v0HQ255AybVUoB12+tssFQa/S0gGQeYzP592VXghClaJLIuck",
	"XlCRgCYZZUCMJLSJFDeQ6a4hZW7/ljAqyFMaW9QoY+iHmbyBIHzouF2HnEQ3NC0sZ+2a2yyrP8Al2/cN",
	"pYNG4MwqtoY/F4nXlW02QQP3EvourhkYyqihfSwQBu4MKUeR2wU4QrgVkFuqSSyzjJvmahoa8wy0oVke",
	"nr8Q/I4IKqSGWApGquEjBXFhIAHV1ruapE/rYGhoOETllZ52wwEjZjF+qICyl1KktX+/Qtd8ZMFyhzCJ",
	"an6g+noLHQsNagsFkYwOxB6mClP6i7ErCfitFTnka3YMuV1IIm+F7p/NLnEuFfAEQ2hMdUwZlDm7BRRK",
	"nUQY7aJzBKTDQj+mVHIYfVxUBf1Hr9j9QO8t7afbGYeSMGtQtLy3FAUZ5enGlGGhorE5wZHRJ0SUJgEf",
	"uEiAcEGWQJUmtwseL0hWaBtLCXwuaGqzhVQkQSAVMQsqyF+gpMUm44JnNj2cdYKOFSeENNSK0Q1g6vDn",
	"l9g1jFvzJtPgiLB1CsE/F1CGs0DUTUCwPp776d2Qk0YRkdHUpr454ItQ0kupSIogwo2J51xpQ8qhJ5tT",
	"VDnM2xlN2B/HvISeGLaWbEZEOEeX2koVcC3CD3uid927l0bxJPGFvgYzay0IbtyO4PdIillVsUkxq4o2",
	"KWa+XJMK7feDrbgtBm5zcKLBPH9WTfpsQgTcktfUwPMXJ0ZeTt9NUdvnL1784Qt2vz3oErBd/3WgrIuI",
	"lhXwY8JdVHRv7CuZG57xv0ARDXZWTNFteaXbfqlLsa791sojH1Vm17AMKFDGme5OZbJZu5DHlKTrFnpl",
	"JAyJKR0xsFkKyMioiRfAZrtAUd6L5WU41ii4AaV7ANEA1zsJxht7pYbU/JUnipbQj0xHWXkP5qRRKYlx",
	"ZZbd2X5bgFlgEG/MSuaUp8BskBfS1NM3AAKlpApuMPAKyUBravPInEjhylEQGCNABQrxVe25G/Ul7soz",
	"XRYwg3Gtp4gOVM61ELiDuAgWzuFauBZYqVECPhwNK7E9FfE7G9t+DphOugsE/9VEgS5So8nVklCC1CVU",
	"MLut46oq1Nv8qq80dnVUx7gh1nEwqflKZChhuGGThohPAe6/D2bH90gcTShJucYStdyaWS1NoQQwMlcy",
	"I7Tq0qxHa7972FyOVNOGfLx/Gyrgzsxyv/TNEuyomTbUifi7gnl0Hv3ttO54nfoW0alVeooD16GsV9kU",
	"PfFK9sE6LYV2scVLZVZyXEfXwo/lvETVFnbGA26N4cWuFWbl7Zi8G/CJIrtyGECdUzcBUKbeYJD8L5q5",
	"EyATJYvc+cb4EJ3yjI8gh6z9rpp70/pLPw1IHMcVVwuMljd1wwPibhegYPQ8v+HozjQhK0yrFbZJ5Vbe",
	"dlmXPO1WwV9FhwUaL4iCWCpGfJ+VUXNFNTyXuduxvOhwjCaJgsTWfB3JVJDqKpkXwnfgJKF5ni4JTSgX",
	"2qCcMiKVcU4XWeVEtmC4c7uXYNCjAU+i6EKyMHlhnCth2i93xT4Ca2KXmHKqo03BtD21vd+hhhsEt+7u",
	"zV7dwNK2hMLIf8tbrMmN/JjnoAIgBON7KPg8NTV2b2q4cmLn1sZTU+OpqfHU1Bjd1GiccX0HrY3fyqqg",
	"jSkWC+3UHUvhPA3T95yn1iFc0taNrE0H0nbfTmGydowEn7GwtX8TRB4RSA3+AXcC6y3DhQ6SsnmKFNqF",
	"SLszc4O6KWuF/Zu5DORh0IaLhMgcBM05cSXTHwK3fCaFeoidHpR2t92cnZydnDlF8cboPPrHydnJj5E7",
	"CEN0TmnOT2vu6FPPs9MramI8K8uLYJrjmmgw5IeXGRXLxs7IG8YfnZDW+Yw1C0aoSxtvf7YSpmAuqkhs",
	"MQNtfpZs6bZPVZK1xQOP8d7TP7UrNuoz71EF5kV97LFWYq7Wz+7xA51LoR2Ffjw760Lw7hc71U+hS5fi",
	"hqacVag81y/c2J+6Y/8jDZnLQmDu+Wd4NgNK0JRMQd2AIm+w54Hn+kXmUmOE1moapMS/uWszNEFvL5H4",
	"ZOfoJQCTsTt6lbqPAC5m6MaZ7Rbmbx+x7W78TTZvyxhv6YMIb4ndmTv3TBxnQkI7hNmJL6df8GGYlVsL",
	"PssQZo67iLsSuOMuvA1ziFwtXZ+xzaTXOFnNpOajO7+HbVQPOXWP9qw+HcjnPY3v2WwOv4DZKoi6xrPF",
	"RJ8nKzCKw82hLPK2GdUPaY4jcMyHMXACZlvr5mXGDtgXGDc7xuk3jB/EmLtF90CR9BTBW0yxpi3bXHJu",
	"/XdUKJ9sKOxc/b9tLOgwZwpfkTij7fpY6OQ3ZfdLJifkEOXA56pV3l8/VnTBTj8HvdM+ApvyuxKt9SDu",
	"ffHNHRs8MNvwUGs3qpWg+3XvwSd3ghM04nZ0qnX2RUxfwTF1A7cC9u7lkmbpYOLZGkc/2751QKDsKp/o",
	"7sJYPQveCPF9YbmB1RjSb4Cpam3tSfGRIr6GJfS2lggTOmZxZ6u0b13+isWjavJX+Lzr0dXjdlnHX4tb",
	"kHvrcKtCv70PlAvbZg7nwV1M/JQDA9SyYB8q/3UMN442wznvFYu/wXy3Fs66EdaRvMpzIfyqx5kOHmyr",
	"B+VGhdxfG49VHV3grRd3/OG3hr03CNfqDHHiQAE5RIVwWN6dBk/BOUC8GvhDhegeU25PreGgXc31DYbu",
	"YHDsBvCmO2wM44bq632PIj9QfT3mHPKDe7LmXg8hP/hHZL6DE0iEPXT8iBhsMPdeB49Dxm584+0+jxyd",
	"nR82ntYyj/6wscWNLalx0DPGNbpsPGD0pPmeThdbdurUW95a+58rjrPC2ypEH10hvYfrPWQNPdKcuxwk",
	"DsXdN4zvb71HeIR4/EG5e344EJ33PTkcosoUvhZTxhnyUZDnYU8Ld83nB9qHDzEKN4k7cepp9x3gFsJ9",
	"qI1313ZjyTO807YzfIOb7PVyqbu/9lwfcRK4BtHTMeCYY8CRBghzt9Cg9m1pfNSgxrQ0PrrvAdxrSwNl",
	"fB8tDYQ91NJADDaYe6+WxpCxG78kc58tDWfnh01Stcyjb2m0uLElNQ7a0lijy8aWhifN99TSaNmpswf2",
	"1tq/pTHOCm+rEH10LY09XO8hWxojzblLS2Mo7r5hfH/rPcKWxvEH5W5LYyA679vSGKLKFL4WU8YZ8lGQ",
	"52FbGrvm8wO1NIYYhdvvnTj11NIIcAvhPlRLo2u7seQZbmnYGb7BlsZ6udTdUXuuj2hprEH01NIY09IY",
	"aYCau8NUnVZT7OXxY39R6WvSdyNwnQdcNLveiNvrX7bDTMYGzEttFLgfkz86giUgrI42rSaSaHZN5lIR",
	"Y1PhxfvLPqj8rxaclJTow+udG/cvjaF2L64N45WDuHh/SXQOMZ/7ida0fQuGhMfVivrra5qWEWJA0//Z",
	"YQ8Q/Q+v66r6tPO7OP6bFZXOuv5vDupfbli/6xWLg3fgNwo6o+uH00L3NB6G7dyJDd/QTf55rvXxGE1D",
	"4135+2n1/wAAAP//jqaDkW5iAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
