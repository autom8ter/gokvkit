package main

import (
    "context"
    "encoding/json"
    "flag"
    "fmt"
    "io"
    "os"
    "path/filepath"
    "strings"

    "github.com/autom8ter/myjson"
    "github.com/autom8ter/myjson/extentions/openapi"
    _ "github.com/autom8ter/myjson/kv/badger"
    _ "github.com/autom8ter/myjson/kv/tikv"
)

// go run tmp/main.go --schema-path=./tmp/schema

var (
    schemaPath     = flag.String("schema-path", "./schema", "the path to the collection schema files")
    provider       = flag.String("provider", "badger", "provider")
    providerParams = flag.String("provider-params", "{\"storage_path\": \"./db\"}", "provider params (json)")
    port           = flag.Int("port", 8080, "the port to serve on")
)

func main() {
    flag.Parse()
    ctx := context.Background()
    params := map[string]interface{}{}
    if err := json.Unmarshal([]byte(*providerParams), &params); err != nil {
        fmt.Println("failed to parse provider params: ", err.Error())
    }
    oapi, err := openapi.New(openapi.Config{
        Title:       "{{.title}}",
        Version:     "{{.version}}",
        Description: "{{.description}}",
        Port:        *port,
    })
    if err != nil {
        fmt.Println("failed to initialize project: ", err.Error())
        return
    }

    db, err := myjson.Open(ctx, *provider, params)
    if err != nil {
        oapi.Logger().Error(ctx, "failed to initialize project: ", map[string]any{
            "error": err,
        })
        return
    }
    defer db.Close(ctx)
    if err := filepath.Walk(*schemaPath, func(path string, info os.FileInfo, err error) error {
        if info != nil && info.IsDir() {
            return nil
        }
        if strings.HasSuffix(path, ".yaml") {
            f, err := os.Open(path)
            if err != nil {
                return err
            }
            defer f.Close()
            bits, err := io.ReadAll(f)
            if err != nil {
                return err
            }
            if err := db.ConfigureCollection(ctx, bits); err != nil {
                if err != nil {
                    return err
                }
            }
        }
        return nil
    }); err != nil {
        oapi.Logger().Error(ctx, "failed to initialize project: ", map[string]any{
            "error": err,
        })
        return
    }
    oapi.Logger().Debug(ctx, fmt.Sprintf("registered collections: %v", db.Collections(ctx)), map[string]any{})
    oapi.Logger().Debug(ctx, fmt.Sprintf("starting openapi http server on port: %v", *port), map[string]any{})
    if err := oapi.Serve(ctx, db); err != nil {
        fmt.Println(err)
    }
}
