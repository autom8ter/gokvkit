package main

import (
    "context"
    "encoding/json"
    "flag"
    "fmt"
    "io"
    "os"
    "path/filepath"
    "strings"

    "github.com/autom8ter/myjson"
    "github.com/autom8ter/myjson/extentions/openapi"
    _ "github.com/autom8ter/myjson/kv/badger"
    _ "github.com/autom8ter/myjson/kv/tikv"
)

// go run tmp/main.go --schema-path=./tmp/schema

var (
	schemaPath = flag.String("schema-path", "./schema", "the path to the collection schema files")
    provider       = flag.String("provider", "badger", "provider")
    providerParams = flag.String("provider-params", "{\"storage_path\": \"./db\"}", "provider params (json)")
)


func main() {
    flag.Parse()
    ctx := context.Background()
    params := map[string]interface{}{}
    if err := json.Unmarshal([]byte(*providerParams), &params); err != nil {
        fmt.Println("failed to parse provider params: ", err.Error())
    }
    db, err := myjson.Open(ctx, *provider, params)
    if err != nil {
        fmt.Println("failed to initialize project: ", err.Error())
        return
    }
    defer db.Close(ctx)
    if err := filepath.Walk(*schemaPath, func(path string, info os.FileInfo, err error) error {
        if info != nil && info.IsDir() {
            return nil
        }
        if strings.HasSuffix(path, ".yaml") {
            f, err := os.Open(path)
            if err != nil {
                return err
            }
            defer f.Close()
            bits, err := io.ReadAll(f)
            if err != nil {
                return err
            }
            if err := db.ConfigureCollection(ctx, bits); err != nil {
                if err != nil {
                    return err
                }
            }
        }
        return nil
    }); err != nil {
        fmt.Println("failed to initialize project: ", err.Error())
        return
    }
    fmt.Println("registered collections: ", db.Collections(ctx))
    oapi, err := openapi.New(openapi.Config{
        Title:       "{{.title}}",
        Version:     "{{.version}}",
        Description: "{{.description}}",
        Port:        8080,
    })
    if err != nil {
        fmt.Println("failed to initialize project: ", err.Error())
        return
    }

    spec, err := oapi.Spec(db)
    if err != nil {
        fmt.Println("failed to get openapi spec: ", err.Error())
        return
    }
    of, err := os.Create("./openapi.yaml")
    if err != nil {
        fmt.Println("failed to create openapi spec: ", err.Error())
        return
    }
    defer of.Close()
    if _, err := of.Write(spec); err != nil {
        fmt.Println("failed to write ./openapi.yaml: ", err.Error())
        return
    }

    fmt.Println("starting openapi http server on port :8080")
    if err := oapi.Serve(ctx, db); err != nil {
        fmt.Println(err)
    }
}
