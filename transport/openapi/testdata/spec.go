// Package testdata provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.1 DO NOT EDIT.
package testdata

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
