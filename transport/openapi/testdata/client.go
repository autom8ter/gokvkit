// Package testdata provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.1 DO NOT EDIT.
package testdata

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BatchSetAccount request with any body
	BatchSetAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BatchSetAccount(ctx context.Context, body BatchSetAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAccount request with any body
	CreateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAccount(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryAccount request with any body
	QueryAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryAccount(ctx context.Context, body QueryAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAccount request
	DeleteAccount(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccount request
	GetAccount(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditAccount request with any body
	EditAccountWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditAccount(ctx context.Context, docID DocID, body EditAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetAccount request with any body
	SetAccountWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetAccount(ctx context.Context, docID DocID, body SetAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BatchSetCdc request with any body
	BatchSetCdcWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BatchSetCdc(ctx context.Context, body BatchSetCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCdc request with any body
	CreateCdcWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCdc(ctx context.Context, body CreateCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryCdc request with any body
	QueryCdcWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryCdc(ctx context.Context, body QueryCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCdc request
	DeleteCdc(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCdc request
	GetCdc(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditCdc request with any body
	EditCdcWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditCdc(ctx context.Context, docID DocID, body EditCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetCdc request with any body
	SetCdcWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetCdc(ctx context.Context, docID DocID, body SetCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BatchSetMigration request with any body
	BatchSetMigrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BatchSetMigration(ctx context.Context, body BatchSetMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMigration request with any body
	CreateMigrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMigration(ctx context.Context, body CreateMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryMigration request with any body
	QueryMigrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryMigration(ctx context.Context, body QueryMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMigration request
	DeleteMigration(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMigration request
	GetMigration(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditMigration request with any body
	EditMigrationWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditMigration(ctx context.Context, docID DocID, body EditMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetMigration request with any body
	SetMigrationWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetMigration(ctx context.Context, docID DocID, body SetMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BatchSetTask request with any body
	BatchSetTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BatchSetTask(ctx context.Context, body BatchSetTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTask request with any body
	CreateTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTask(ctx context.Context, body CreateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryTask request with any body
	QueryTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryTask(ctx context.Context, body QueryTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTask request
	DeleteTask(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTask request
	GetTask(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditTask request with any body
	EditTaskWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditTask(ctx context.Context, docID DocID, body EditTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetTask request with any body
	SetTaskWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetTask(ctx context.Context, docID DocID, body SetTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BatchSetUser request with any body
	BatchSetUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BatchSetUser(ctx context.Context, body BatchSetUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUser request with any body
	CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryUser request with any body
	QueryUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	QueryUser(ctx context.Context, body QueryUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUser request
	DeleteUser(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditUser request with any body
	EditUserWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditUser(ctx context.Context, docID DocID, body EditUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetUser request with any body
	SetUserWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetUser(ctx context.Context, docID DocID, body SetUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchemas request
	GetSchemas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountSchema request
	GetAccountSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetAccountSchema request with any body
	SetAccountSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetAccountSchema(ctx context.Context, body SetAccountSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCdcSchema request
	GetCdcSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetCdcSchema request with any body
	SetCdcSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetCdcSchema(ctx context.Context, body SetCdcSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMigrationSchema request
	GetMigrationSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetMigrationSchema request with any body
	SetMigrationSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetMigrationSchema(ctx context.Context, body SetMigrationSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTaskSchema request
	GetTaskSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetTaskSchema request with any body
	SetTaskSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetTaskSchema(ctx context.Context, body SetTaskSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserSchema request
	GetUserSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetUserSchema request with any body
	SetUserSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetUserSchema(ctx context.Context, body SetUserSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BatchSetAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchSetAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchSetAccount(ctx context.Context, body BatchSetAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchSetAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccount(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryAccount(ctx context.Context, body QueryAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccount(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountRequest(c.Server, docID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccount(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountRequest(c.Server, docID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditAccountWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditAccountRequestWithBody(c.Server, docID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditAccount(ctx context.Context, docID DocID, body EditAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditAccountRequest(c.Server, docID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetAccountWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetAccountRequestWithBody(c.Server, docID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetAccount(ctx context.Context, docID DocID, body SetAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetAccountRequest(c.Server, docID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchSetCdcWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchSetCdcRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchSetCdc(ctx context.Context, body BatchSetCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchSetCdcRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCdcWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCdcRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCdc(ctx context.Context, body CreateCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCdcRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryCdcWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryCdcRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryCdc(ctx context.Context, body QueryCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryCdcRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCdc(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCdcRequest(c.Server, docID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCdc(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCdcRequest(c.Server, docID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditCdcWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditCdcRequestWithBody(c.Server, docID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditCdc(ctx context.Context, docID DocID, body EditCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditCdcRequest(c.Server, docID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetCdcWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetCdcRequestWithBody(c.Server, docID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetCdc(ctx context.Context, docID DocID, body SetCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetCdcRequest(c.Server, docID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchSetMigrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchSetMigrationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchSetMigration(ctx context.Context, body BatchSetMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchSetMigrationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMigrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMigrationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMigration(ctx context.Context, body CreateMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMigrationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryMigrationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryMigrationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryMigration(ctx context.Context, body QueryMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryMigrationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMigration(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMigrationRequest(c.Server, docID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMigration(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMigrationRequest(c.Server, docID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditMigrationWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditMigrationRequestWithBody(c.Server, docID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditMigration(ctx context.Context, docID DocID, body EditMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditMigrationRequest(c.Server, docID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetMigrationWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetMigrationRequestWithBody(c.Server, docID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetMigration(ctx context.Context, docID DocID, body SetMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetMigrationRequest(c.Server, docID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchSetTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchSetTaskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchSetTask(ctx context.Context, body BatchSetTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchSetTaskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTaskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTask(ctx context.Context, body CreateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTaskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryTaskWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryTaskRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryTask(ctx context.Context, body QueryTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryTaskRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTask(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTaskRequest(c.Server, docID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTask(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskRequest(c.Server, docID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditTaskWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditTaskRequestWithBody(c.Server, docID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditTask(ctx context.Context, docID DocID, body EditTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditTaskRequest(c.Server, docID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetTaskWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetTaskRequestWithBody(c.Server, docID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetTask(ctx context.Context, docID DocID, body SetTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetTaskRequest(c.Server, docID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchSetUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchSetUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BatchSetUser(ctx context.Context, body BatchSetUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBatchSetUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryUser(ctx context.Context, body QueryUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUser(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequest(c.Server, docID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, docID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditUserWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditUserRequestWithBody(c.Server, docID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditUser(ctx context.Context, docID DocID, body EditUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditUserRequest(c.Server, docID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetUserWithBody(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetUserRequestWithBody(c.Server, docID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetUser(ctx context.Context, docID DocID, body SetUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetUserRequest(c.Server, docID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchemas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchemasRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetAccountSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetAccountSchemaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetAccountSchema(ctx context.Context, body SetAccountSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetAccountSchemaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCdcSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCdcSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetCdcSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetCdcSchemaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetCdcSchema(ctx context.Context, body SetCdcSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetCdcSchemaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMigrationSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMigrationSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetMigrationSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetMigrationSchemaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetMigrationSchema(ctx context.Context, body SetMigrationSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetMigrationSchemaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTaskSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTaskSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetTaskSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetTaskSchemaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetTaskSchema(ctx context.Context, body SetTaskSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetTaskSchemaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserSchema(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserSchemaRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetUserSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetUserSchemaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetUserSchema(ctx context.Context, body SetUserSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetUserSchemaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBatchSetAccountRequest calls the generic BatchSetAccount builder with application/json body
func NewBatchSetAccountRequest(server string, body BatchSetAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBatchSetAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewBatchSetAccountRequestWithBody generates requests for BatchSetAccount with any type of body
func NewBatchSetAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/account/batchset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateAccountRequest calls the generic CreateAccount builder with application/json body
func NewCreateAccountRequest(server string, body CreateAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAccountRequestWithBody generates requests for CreateAccount with any type of body
func NewCreateAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/account/docs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryAccountRequest calls the generic QueryAccount builder with application/json body
func NewQueryAccountRequest(server string, body QueryAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryAccountRequestWithBody generates requests for QueryAccount with any type of body
func NewQueryAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/account/query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAccountRequest generates requests for DeleteAccount
func NewDeleteAccountRequest(server string, docID DocID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/account/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountRequest generates requests for GetAccount
func NewGetAccountRequest(server string, docID DocID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/account/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditAccountRequest calls the generic EditAccount builder with application/json body
func NewEditAccountRequest(server string, docID DocID, body EditAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditAccountRequestWithBody(server, docID, "application/json", bodyReader)
}

// NewEditAccountRequestWithBody generates requests for EditAccount with any type of body
func NewEditAccountRequestWithBody(server string, docID DocID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/account/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetAccountRequest calls the generic SetAccount builder with application/json body
func NewSetAccountRequest(server string, docID DocID, body SetAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetAccountRequestWithBody(server, docID, "application/json", bodyReader)
}

// NewSetAccountRequestWithBody generates requests for SetAccount with any type of body
func NewSetAccountRequestWithBody(server string, docID DocID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/account/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBatchSetCdcRequest calls the generic BatchSetCdc builder with application/json body
func NewBatchSetCdcRequest(server string, body BatchSetCdcJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBatchSetCdcRequestWithBody(server, "application/json", bodyReader)
}

// NewBatchSetCdcRequestWithBody generates requests for BatchSetCdc with any type of body
func NewBatchSetCdcRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/cdc/batchset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateCdcRequest calls the generic CreateCdc builder with application/json body
func NewCreateCdcRequest(server string, body CreateCdcJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCdcRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCdcRequestWithBody generates requests for CreateCdc with any type of body
func NewCreateCdcRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/cdc/docs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryCdcRequest calls the generic QueryCdc builder with application/json body
func NewQueryCdcRequest(server string, body QueryCdcJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryCdcRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryCdcRequestWithBody generates requests for QueryCdc with any type of body
func NewQueryCdcRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/cdc/query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCdcRequest generates requests for DeleteCdc
func NewDeleteCdcRequest(server string, docID DocID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/cdc/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCdcRequest generates requests for GetCdc
func NewGetCdcRequest(server string, docID DocID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/cdc/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditCdcRequest calls the generic EditCdc builder with application/json body
func NewEditCdcRequest(server string, docID DocID, body EditCdcJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditCdcRequestWithBody(server, docID, "application/json", bodyReader)
}

// NewEditCdcRequestWithBody generates requests for EditCdc with any type of body
func NewEditCdcRequestWithBody(server string, docID DocID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/cdc/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetCdcRequest calls the generic SetCdc builder with application/json body
func NewSetCdcRequest(server string, docID DocID, body SetCdcJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetCdcRequestWithBody(server, docID, "application/json", bodyReader)
}

// NewSetCdcRequestWithBody generates requests for SetCdc with any type of body
func NewSetCdcRequestWithBody(server string, docID DocID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/cdc/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBatchSetMigrationRequest calls the generic BatchSetMigration builder with application/json body
func NewBatchSetMigrationRequest(server string, body BatchSetMigrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBatchSetMigrationRequestWithBody(server, "application/json", bodyReader)
}

// NewBatchSetMigrationRequestWithBody generates requests for BatchSetMigration with any type of body
func NewBatchSetMigrationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/migration/batchset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateMigrationRequest calls the generic CreateMigration builder with application/json body
func NewCreateMigrationRequest(server string, body CreateMigrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMigrationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateMigrationRequestWithBody generates requests for CreateMigration with any type of body
func NewCreateMigrationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/migration/docs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryMigrationRequest calls the generic QueryMigration builder with application/json body
func NewQueryMigrationRequest(server string, body QueryMigrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryMigrationRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryMigrationRequestWithBody generates requests for QueryMigration with any type of body
func NewQueryMigrationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/migration/query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMigrationRequest generates requests for DeleteMigration
func NewDeleteMigrationRequest(server string, docID DocID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/migration/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMigrationRequest generates requests for GetMigration
func NewGetMigrationRequest(server string, docID DocID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/migration/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditMigrationRequest calls the generic EditMigration builder with application/json body
func NewEditMigrationRequest(server string, docID DocID, body EditMigrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditMigrationRequestWithBody(server, docID, "application/json", bodyReader)
}

// NewEditMigrationRequestWithBody generates requests for EditMigration with any type of body
func NewEditMigrationRequestWithBody(server string, docID DocID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/migration/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetMigrationRequest calls the generic SetMigration builder with application/json body
func NewSetMigrationRequest(server string, docID DocID, body SetMigrationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetMigrationRequestWithBody(server, docID, "application/json", bodyReader)
}

// NewSetMigrationRequestWithBody generates requests for SetMigration with any type of body
func NewSetMigrationRequestWithBody(server string, docID DocID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/migration/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBatchSetTaskRequest calls the generic BatchSetTask builder with application/json body
func NewBatchSetTaskRequest(server string, body BatchSetTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBatchSetTaskRequestWithBody(server, "application/json", bodyReader)
}

// NewBatchSetTaskRequestWithBody generates requests for BatchSetTask with any type of body
func NewBatchSetTaskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/task/batchset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateTaskRequest calls the generic CreateTask builder with application/json body
func NewCreateTaskRequest(server string, body CreateTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTaskRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTaskRequestWithBody generates requests for CreateTask with any type of body
func NewCreateTaskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/task/docs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryTaskRequest calls the generic QueryTask builder with application/json body
func NewQueryTaskRequest(server string, body QueryTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryTaskRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryTaskRequestWithBody generates requests for QueryTask with any type of body
func NewQueryTaskRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/task/query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTaskRequest generates requests for DeleteTask
func NewDeleteTaskRequest(server string, docID DocID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/task/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTaskRequest generates requests for GetTask
func NewGetTaskRequest(server string, docID DocID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/task/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditTaskRequest calls the generic EditTask builder with application/json body
func NewEditTaskRequest(server string, docID DocID, body EditTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditTaskRequestWithBody(server, docID, "application/json", bodyReader)
}

// NewEditTaskRequestWithBody generates requests for EditTask with any type of body
func NewEditTaskRequestWithBody(server string, docID DocID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/task/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetTaskRequest calls the generic SetTask builder with application/json body
func NewSetTaskRequest(server string, docID DocID, body SetTaskJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetTaskRequestWithBody(server, docID, "application/json", bodyReader)
}

// NewSetTaskRequestWithBody generates requests for SetTask with any type of body
func NewSetTaskRequestWithBody(server string, docID DocID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/task/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBatchSetUserRequest calls the generic BatchSetUser builder with application/json body
func NewBatchSetUserRequest(server string, body BatchSetUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBatchSetUserRequestWithBody(server, "application/json", bodyReader)
}

// NewBatchSetUserRequestWithBody generates requests for BatchSetUser with any type of body
func NewBatchSetUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/user/batchset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateUserRequest calls the generic CreateUser builder with application/json body
func NewCreateUserRequest(server string, body CreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserRequestWithBody generates requests for CreateUser with any type of body
func NewCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/user/docs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryUserRequest calls the generic QueryUser builder with application/json body
func NewQueryUserRequest(server string, body QueryUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewQueryUserRequestWithBody(server, "application/json", bodyReader)
}

// NewQueryUserRequestWithBody generates requests for QueryUser with any type of body
func NewQueryUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/user/query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserRequest generates requests for DeleteUser
func NewDeleteUserRequest(server string, docID DocID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, docID DocID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEditUserRequest calls the generic EditUser builder with application/json body
func NewEditUserRequest(server string, docID DocID, body EditUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditUserRequestWithBody(server, docID, "application/json", bodyReader)
}

// NewEditUserRequestWithBody generates requests for EditUser with any type of body
func NewEditUserRequestWithBody(server string, docID DocID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetUserRequest calls the generic SetUser builder with application/json body
func NewSetUserRequest(server string, docID DocID, body SetUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetUserRequestWithBody(server, docID, "application/json", bodyReader)
}

// NewSetUserRequestWithBody generates requests for SetUser with any type of body
func NewSetUserRequestWithBody(server string, docID DocID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "docID", runtime.ParamLocationPath, docID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/collections/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSchemasRequest generates requests for GetSchemas
func NewGetSchemasRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountSchemaRequest generates requests for GetAccountSchema
func NewGetAccountSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/schema/account")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetAccountSchemaRequest calls the generic SetAccountSchema builder with application/json body
func NewSetAccountSchemaRequest(server string, body SetAccountSchemaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetAccountSchemaRequestWithBody(server, "application/json", bodyReader)
}

// NewSetAccountSchemaRequestWithBody generates requests for SetAccountSchema with any type of body
func NewSetAccountSchemaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/schema/account")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCdcSchemaRequest generates requests for GetCdcSchema
func NewGetCdcSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/schema/cdc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetCdcSchemaRequest calls the generic SetCdcSchema builder with application/json body
func NewSetCdcSchemaRequest(server string, body SetCdcSchemaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetCdcSchemaRequestWithBody(server, "application/json", bodyReader)
}

// NewSetCdcSchemaRequestWithBody generates requests for SetCdcSchema with any type of body
func NewSetCdcSchemaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/schema/cdc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMigrationSchemaRequest generates requests for GetMigrationSchema
func NewGetMigrationSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/schema/migration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetMigrationSchemaRequest calls the generic SetMigrationSchema builder with application/json body
func NewSetMigrationSchemaRequest(server string, body SetMigrationSchemaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetMigrationSchemaRequestWithBody(server, "application/json", bodyReader)
}

// NewSetMigrationSchemaRequestWithBody generates requests for SetMigrationSchema with any type of body
func NewSetMigrationSchemaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/schema/migration")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTaskSchemaRequest generates requests for GetTaskSchema
func NewGetTaskSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/schema/task")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetTaskSchemaRequest calls the generic SetTaskSchema builder with application/json body
func NewSetTaskSchemaRequest(server string, body SetTaskSchemaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetTaskSchemaRequestWithBody(server, "application/json", bodyReader)
}

// NewSetTaskSchemaRequestWithBody generates requests for SetTaskSchema with any type of body
func NewSetTaskSchemaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/schema/task")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserSchemaRequest generates requests for GetUserSchema
func NewGetUserSchemaRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/schema/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetUserSchemaRequest calls the generic SetUserSchema builder with application/json body
func NewSetUserSchemaRequest(server string, body SetUserSchemaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetUserSchemaRequestWithBody(server, "application/json", bodyReader)
}

// NewSetUserSchemaRequestWithBody generates requests for SetUserSchema with any type of body
func NewSetUserSchemaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/schema/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BatchSetAccount request with any body
	BatchSetAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchSetAccountResponse, error)

	BatchSetAccountWithResponse(ctx context.Context, body BatchSetAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchSetAccountResponse, error)

	// CreateAccount request with any body
	CreateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error)

	CreateAccountWithResponse(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error)

	// QueryAccount request with any body
	QueryAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryAccountResponse, error)

	QueryAccountWithResponse(ctx context.Context, body QueryAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryAccountResponse, error)

	// DeleteAccount request
	DeleteAccountWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*DeleteAccountResponse, error)

	// GetAccount request
	GetAccountWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*GetAccountResponse, error)

	// EditAccount request with any body
	EditAccountWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditAccountResponse, error)

	EditAccountWithResponse(ctx context.Context, docID DocID, body EditAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*EditAccountResponse, error)

	// SetAccount request with any body
	SetAccountWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetAccountResponse, error)

	SetAccountWithResponse(ctx context.Context, docID DocID, body SetAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*SetAccountResponse, error)

	// BatchSetCdc request with any body
	BatchSetCdcWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchSetCdcResponse, error)

	BatchSetCdcWithResponse(ctx context.Context, body BatchSetCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchSetCdcResponse, error)

	// CreateCdc request with any body
	CreateCdcWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCdcResponse, error)

	CreateCdcWithResponse(ctx context.Context, body CreateCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCdcResponse, error)

	// QueryCdc request with any body
	QueryCdcWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryCdcResponse, error)

	QueryCdcWithResponse(ctx context.Context, body QueryCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryCdcResponse, error)

	// DeleteCdc request
	DeleteCdcWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*DeleteCdcResponse, error)

	// GetCdc request
	GetCdcWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*GetCdcResponse, error)

	// EditCdc request with any body
	EditCdcWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditCdcResponse, error)

	EditCdcWithResponse(ctx context.Context, docID DocID, body EditCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*EditCdcResponse, error)

	// SetCdc request with any body
	SetCdcWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetCdcResponse, error)

	SetCdcWithResponse(ctx context.Context, docID DocID, body SetCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*SetCdcResponse, error)

	// BatchSetMigration request with any body
	BatchSetMigrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchSetMigrationResponse, error)

	BatchSetMigrationWithResponse(ctx context.Context, body BatchSetMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchSetMigrationResponse, error)

	// CreateMigration request with any body
	CreateMigrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMigrationResponse, error)

	CreateMigrationWithResponse(ctx context.Context, body CreateMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMigrationResponse, error)

	// QueryMigration request with any body
	QueryMigrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryMigrationResponse, error)

	QueryMigrationWithResponse(ctx context.Context, body QueryMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryMigrationResponse, error)

	// DeleteMigration request
	DeleteMigrationWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*DeleteMigrationResponse, error)

	// GetMigration request
	GetMigrationWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*GetMigrationResponse, error)

	// EditMigration request with any body
	EditMigrationWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditMigrationResponse, error)

	EditMigrationWithResponse(ctx context.Context, docID DocID, body EditMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*EditMigrationResponse, error)

	// SetMigration request with any body
	SetMigrationWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetMigrationResponse, error)

	SetMigrationWithResponse(ctx context.Context, docID DocID, body SetMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*SetMigrationResponse, error)

	// BatchSetTask request with any body
	BatchSetTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchSetTaskResponse, error)

	BatchSetTaskWithResponse(ctx context.Context, body BatchSetTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchSetTaskResponse, error)

	// CreateTask request with any body
	CreateTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTaskResponse, error)

	CreateTaskWithResponse(ctx context.Context, body CreateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTaskResponse, error)

	// QueryTask request with any body
	QueryTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryTaskResponse, error)

	QueryTaskWithResponse(ctx context.Context, body QueryTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryTaskResponse, error)

	// DeleteTask request
	DeleteTaskWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*DeleteTaskResponse, error)

	// GetTask request
	GetTaskWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*GetTaskResponse, error)

	// EditTask request with any body
	EditTaskWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditTaskResponse, error)

	EditTaskWithResponse(ctx context.Context, docID DocID, body EditTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*EditTaskResponse, error)

	// SetTask request with any body
	SetTaskWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetTaskResponse, error)

	SetTaskWithResponse(ctx context.Context, docID DocID, body SetTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*SetTaskResponse, error)

	// BatchSetUser request with any body
	BatchSetUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchSetUserResponse, error)

	BatchSetUserWithResponse(ctx context.Context, body BatchSetUserJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchSetUserResponse, error)

	// CreateUser request with any body
	CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	// QueryUser request with any body
	QueryUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryUserResponse, error)

	QueryUserWithResponse(ctx context.Context, body QueryUserJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryUserResponse, error)

	// DeleteUser request
	DeleteUserWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	// GetUser request
	GetUserWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// EditUser request with any body
	EditUserWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditUserResponse, error)

	EditUserWithResponse(ctx context.Context, docID DocID, body EditUserJSONRequestBody, reqEditors ...RequestEditorFn) (*EditUserResponse, error)

	// SetUser request with any body
	SetUserWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetUserResponse, error)

	SetUserWithResponse(ctx context.Context, docID DocID, body SetUserJSONRequestBody, reqEditors ...RequestEditorFn) (*SetUserResponse, error)

	// GetSchemas request
	GetSchemasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSchemasResponse, error)

	// GetAccountSchema request
	GetAccountSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountSchemaResponse, error)

	// SetAccountSchema request with any body
	SetAccountSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetAccountSchemaResponse, error)

	SetAccountSchemaWithResponse(ctx context.Context, body SetAccountSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*SetAccountSchemaResponse, error)

	// GetCdcSchema request
	GetCdcSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCdcSchemaResponse, error)

	// SetCdcSchema request with any body
	SetCdcSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetCdcSchemaResponse, error)

	SetCdcSchemaWithResponse(ctx context.Context, body SetCdcSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*SetCdcSchemaResponse, error)

	// GetMigrationSchema request
	GetMigrationSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMigrationSchemaResponse, error)

	// SetMigrationSchema request with any body
	SetMigrationSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetMigrationSchemaResponse, error)

	SetMigrationSchemaWithResponse(ctx context.Context, body SetMigrationSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*SetMigrationSchemaResponse, error)

	// GetTaskSchema request
	GetTaskSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTaskSchemaResponse, error)

	// SetTaskSchema request with any body
	SetTaskSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetTaskSchemaResponse, error)

	SetTaskSchemaWithResponse(ctx context.Context, body SetTaskSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*SetTaskSchemaResponse, error)

	// GetUserSchema request
	GetUserSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserSchemaResponse, error)

	// SetUserSchema request with any body
	SetUserSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetUserSchemaResponse, error)

	SetUserSchemaWithResponse(ctx context.Context, body SetUserSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*SetUserSchemaResponse, error)
}

type BatchSetAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BatchSetAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchSetAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r CreateAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Page
}

// Status returns HTTPResponse.Status
func (r QueryAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r GetAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r EditAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Account
}

// Status returns HTTPResponse.Status
func (r SetAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BatchSetCdcResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BatchSetCdcResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchSetCdcResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCdcResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cdc
}

// Status returns HTTPResponse.Status
func (r CreateCdcResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCdcResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryCdcResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Page
}

// Status returns HTTPResponse.Status
func (r QueryCdcResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryCdcResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCdcResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCdcResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCdcResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCdcResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cdc
}

// Status returns HTTPResponse.Status
func (r GetCdcResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCdcResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditCdcResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cdc
}

// Status returns HTTPResponse.Status
func (r EditCdcResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditCdcResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetCdcResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cdc
}

// Status returns HTTPResponse.Status
func (r SetCdcResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetCdcResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BatchSetMigrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BatchSetMigrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchSetMigrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMigrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Migration
}

// Status returns HTTPResponse.Status
func (r CreateMigrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMigrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryMigrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Page
}

// Status returns HTTPResponse.Status
func (r QueryMigrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryMigrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMigrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMigrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMigrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMigrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Migration
}

// Status returns HTTPResponse.Status
func (r GetMigrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMigrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditMigrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Migration
}

// Status returns HTTPResponse.Status
func (r EditMigrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditMigrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetMigrationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Migration
}

// Status returns HTTPResponse.Status
func (r SetMigrationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetMigrationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BatchSetTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BatchSetTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchSetTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
}

// Status returns HTTPResponse.Status
func (r CreateTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Page
}

// Status returns HTTPResponse.Status
func (r QueryTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
}

// Status returns HTTPResponse.Status
func (r GetTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
}

// Status returns HTTPResponse.Status
func (r EditTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetTaskResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Task
}

// Status returns HTTPResponse.Status
func (r SetTaskResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetTaskResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BatchSetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r BatchSetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BatchSetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r CreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Page
}

// Status returns HTTPResponse.Status
func (r QueryUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r EditUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r SetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchemasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetSchemasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchemasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetAccountSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetAccountSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r SetAccountSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetAccountSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCdcSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetCdcSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCdcSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetCdcSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r SetCdcSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetCdcSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMigrationSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetMigrationSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMigrationSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetMigrationSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r SetMigrationSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetMigrationSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTaskSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetTaskSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTaskSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetTaskSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r SetTaskSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetTaskSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetUserSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetUserSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r SetUserSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetUserSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BatchSetAccountWithBodyWithResponse request with arbitrary body returning *BatchSetAccountResponse
func (c *ClientWithResponses) BatchSetAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchSetAccountResponse, error) {
	rsp, err := c.BatchSetAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchSetAccountResponse(rsp)
}

func (c *ClientWithResponses) BatchSetAccountWithResponse(ctx context.Context, body BatchSetAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchSetAccountResponse, error) {
	rsp, err := c.BatchSetAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchSetAccountResponse(rsp)
}

// CreateAccountWithBodyWithResponse request with arbitrary body returning *CreateAccountResponse
func (c *ClientWithResponses) CreateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error) {
	rsp, err := c.CreateAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountResponse(rsp)
}

func (c *ClientWithResponses) CreateAccountWithResponse(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error) {
	rsp, err := c.CreateAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountResponse(rsp)
}

// QueryAccountWithBodyWithResponse request with arbitrary body returning *QueryAccountResponse
func (c *ClientWithResponses) QueryAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryAccountResponse, error) {
	rsp, err := c.QueryAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryAccountResponse(rsp)
}

func (c *ClientWithResponses) QueryAccountWithResponse(ctx context.Context, body QueryAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryAccountResponse, error) {
	rsp, err := c.QueryAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryAccountResponse(rsp)
}

// DeleteAccountWithResponse request returning *DeleteAccountResponse
func (c *ClientWithResponses) DeleteAccountWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*DeleteAccountResponse, error) {
	rsp, err := c.DeleteAccount(ctx, docID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountResponse(rsp)
}

// GetAccountWithResponse request returning *GetAccountResponse
func (c *ClientWithResponses) GetAccountWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*GetAccountResponse, error) {
	rsp, err := c.GetAccount(ctx, docID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountResponse(rsp)
}

// EditAccountWithBodyWithResponse request with arbitrary body returning *EditAccountResponse
func (c *ClientWithResponses) EditAccountWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditAccountResponse, error) {
	rsp, err := c.EditAccountWithBody(ctx, docID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditAccountResponse(rsp)
}

func (c *ClientWithResponses) EditAccountWithResponse(ctx context.Context, docID DocID, body EditAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*EditAccountResponse, error) {
	rsp, err := c.EditAccount(ctx, docID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditAccountResponse(rsp)
}

// SetAccountWithBodyWithResponse request with arbitrary body returning *SetAccountResponse
func (c *ClientWithResponses) SetAccountWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetAccountResponse, error) {
	rsp, err := c.SetAccountWithBody(ctx, docID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetAccountResponse(rsp)
}

func (c *ClientWithResponses) SetAccountWithResponse(ctx context.Context, docID DocID, body SetAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*SetAccountResponse, error) {
	rsp, err := c.SetAccount(ctx, docID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetAccountResponse(rsp)
}

// BatchSetCdcWithBodyWithResponse request with arbitrary body returning *BatchSetCdcResponse
func (c *ClientWithResponses) BatchSetCdcWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchSetCdcResponse, error) {
	rsp, err := c.BatchSetCdcWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchSetCdcResponse(rsp)
}

func (c *ClientWithResponses) BatchSetCdcWithResponse(ctx context.Context, body BatchSetCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchSetCdcResponse, error) {
	rsp, err := c.BatchSetCdc(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchSetCdcResponse(rsp)
}

// CreateCdcWithBodyWithResponse request with arbitrary body returning *CreateCdcResponse
func (c *ClientWithResponses) CreateCdcWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCdcResponse, error) {
	rsp, err := c.CreateCdcWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCdcResponse(rsp)
}

func (c *ClientWithResponses) CreateCdcWithResponse(ctx context.Context, body CreateCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCdcResponse, error) {
	rsp, err := c.CreateCdc(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCdcResponse(rsp)
}

// QueryCdcWithBodyWithResponse request with arbitrary body returning *QueryCdcResponse
func (c *ClientWithResponses) QueryCdcWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryCdcResponse, error) {
	rsp, err := c.QueryCdcWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryCdcResponse(rsp)
}

func (c *ClientWithResponses) QueryCdcWithResponse(ctx context.Context, body QueryCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryCdcResponse, error) {
	rsp, err := c.QueryCdc(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryCdcResponse(rsp)
}

// DeleteCdcWithResponse request returning *DeleteCdcResponse
func (c *ClientWithResponses) DeleteCdcWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*DeleteCdcResponse, error) {
	rsp, err := c.DeleteCdc(ctx, docID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCdcResponse(rsp)
}

// GetCdcWithResponse request returning *GetCdcResponse
func (c *ClientWithResponses) GetCdcWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*GetCdcResponse, error) {
	rsp, err := c.GetCdc(ctx, docID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCdcResponse(rsp)
}

// EditCdcWithBodyWithResponse request with arbitrary body returning *EditCdcResponse
func (c *ClientWithResponses) EditCdcWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditCdcResponse, error) {
	rsp, err := c.EditCdcWithBody(ctx, docID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditCdcResponse(rsp)
}

func (c *ClientWithResponses) EditCdcWithResponse(ctx context.Context, docID DocID, body EditCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*EditCdcResponse, error) {
	rsp, err := c.EditCdc(ctx, docID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditCdcResponse(rsp)
}

// SetCdcWithBodyWithResponse request with arbitrary body returning *SetCdcResponse
func (c *ClientWithResponses) SetCdcWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetCdcResponse, error) {
	rsp, err := c.SetCdcWithBody(ctx, docID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetCdcResponse(rsp)
}

func (c *ClientWithResponses) SetCdcWithResponse(ctx context.Context, docID DocID, body SetCdcJSONRequestBody, reqEditors ...RequestEditorFn) (*SetCdcResponse, error) {
	rsp, err := c.SetCdc(ctx, docID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetCdcResponse(rsp)
}

// BatchSetMigrationWithBodyWithResponse request with arbitrary body returning *BatchSetMigrationResponse
func (c *ClientWithResponses) BatchSetMigrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchSetMigrationResponse, error) {
	rsp, err := c.BatchSetMigrationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchSetMigrationResponse(rsp)
}

func (c *ClientWithResponses) BatchSetMigrationWithResponse(ctx context.Context, body BatchSetMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchSetMigrationResponse, error) {
	rsp, err := c.BatchSetMigration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchSetMigrationResponse(rsp)
}

// CreateMigrationWithBodyWithResponse request with arbitrary body returning *CreateMigrationResponse
func (c *ClientWithResponses) CreateMigrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMigrationResponse, error) {
	rsp, err := c.CreateMigrationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMigrationResponse(rsp)
}

func (c *ClientWithResponses) CreateMigrationWithResponse(ctx context.Context, body CreateMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMigrationResponse, error) {
	rsp, err := c.CreateMigration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMigrationResponse(rsp)
}

// QueryMigrationWithBodyWithResponse request with arbitrary body returning *QueryMigrationResponse
func (c *ClientWithResponses) QueryMigrationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryMigrationResponse, error) {
	rsp, err := c.QueryMigrationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryMigrationResponse(rsp)
}

func (c *ClientWithResponses) QueryMigrationWithResponse(ctx context.Context, body QueryMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryMigrationResponse, error) {
	rsp, err := c.QueryMigration(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryMigrationResponse(rsp)
}

// DeleteMigrationWithResponse request returning *DeleteMigrationResponse
func (c *ClientWithResponses) DeleteMigrationWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*DeleteMigrationResponse, error) {
	rsp, err := c.DeleteMigration(ctx, docID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMigrationResponse(rsp)
}

// GetMigrationWithResponse request returning *GetMigrationResponse
func (c *ClientWithResponses) GetMigrationWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*GetMigrationResponse, error) {
	rsp, err := c.GetMigration(ctx, docID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMigrationResponse(rsp)
}

// EditMigrationWithBodyWithResponse request with arbitrary body returning *EditMigrationResponse
func (c *ClientWithResponses) EditMigrationWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditMigrationResponse, error) {
	rsp, err := c.EditMigrationWithBody(ctx, docID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditMigrationResponse(rsp)
}

func (c *ClientWithResponses) EditMigrationWithResponse(ctx context.Context, docID DocID, body EditMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*EditMigrationResponse, error) {
	rsp, err := c.EditMigration(ctx, docID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditMigrationResponse(rsp)
}

// SetMigrationWithBodyWithResponse request with arbitrary body returning *SetMigrationResponse
func (c *ClientWithResponses) SetMigrationWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetMigrationResponse, error) {
	rsp, err := c.SetMigrationWithBody(ctx, docID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetMigrationResponse(rsp)
}

func (c *ClientWithResponses) SetMigrationWithResponse(ctx context.Context, docID DocID, body SetMigrationJSONRequestBody, reqEditors ...RequestEditorFn) (*SetMigrationResponse, error) {
	rsp, err := c.SetMigration(ctx, docID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetMigrationResponse(rsp)
}

// BatchSetTaskWithBodyWithResponse request with arbitrary body returning *BatchSetTaskResponse
func (c *ClientWithResponses) BatchSetTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchSetTaskResponse, error) {
	rsp, err := c.BatchSetTaskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchSetTaskResponse(rsp)
}

func (c *ClientWithResponses) BatchSetTaskWithResponse(ctx context.Context, body BatchSetTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchSetTaskResponse, error) {
	rsp, err := c.BatchSetTask(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchSetTaskResponse(rsp)
}

// CreateTaskWithBodyWithResponse request with arbitrary body returning *CreateTaskResponse
func (c *ClientWithResponses) CreateTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTaskResponse, error) {
	rsp, err := c.CreateTaskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTaskResponse(rsp)
}

func (c *ClientWithResponses) CreateTaskWithResponse(ctx context.Context, body CreateTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTaskResponse, error) {
	rsp, err := c.CreateTask(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTaskResponse(rsp)
}

// QueryTaskWithBodyWithResponse request with arbitrary body returning *QueryTaskResponse
func (c *ClientWithResponses) QueryTaskWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryTaskResponse, error) {
	rsp, err := c.QueryTaskWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryTaskResponse(rsp)
}

func (c *ClientWithResponses) QueryTaskWithResponse(ctx context.Context, body QueryTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryTaskResponse, error) {
	rsp, err := c.QueryTask(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryTaskResponse(rsp)
}

// DeleteTaskWithResponse request returning *DeleteTaskResponse
func (c *ClientWithResponses) DeleteTaskWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*DeleteTaskResponse, error) {
	rsp, err := c.DeleteTask(ctx, docID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTaskResponse(rsp)
}

// GetTaskWithResponse request returning *GetTaskResponse
func (c *ClientWithResponses) GetTaskWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*GetTaskResponse, error) {
	rsp, err := c.GetTask(ctx, docID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskResponse(rsp)
}

// EditTaskWithBodyWithResponse request with arbitrary body returning *EditTaskResponse
func (c *ClientWithResponses) EditTaskWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditTaskResponse, error) {
	rsp, err := c.EditTaskWithBody(ctx, docID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditTaskResponse(rsp)
}

func (c *ClientWithResponses) EditTaskWithResponse(ctx context.Context, docID DocID, body EditTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*EditTaskResponse, error) {
	rsp, err := c.EditTask(ctx, docID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditTaskResponse(rsp)
}

// SetTaskWithBodyWithResponse request with arbitrary body returning *SetTaskResponse
func (c *ClientWithResponses) SetTaskWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetTaskResponse, error) {
	rsp, err := c.SetTaskWithBody(ctx, docID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetTaskResponse(rsp)
}

func (c *ClientWithResponses) SetTaskWithResponse(ctx context.Context, docID DocID, body SetTaskJSONRequestBody, reqEditors ...RequestEditorFn) (*SetTaskResponse, error) {
	rsp, err := c.SetTask(ctx, docID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetTaskResponse(rsp)
}

// BatchSetUserWithBodyWithResponse request with arbitrary body returning *BatchSetUserResponse
func (c *ClientWithResponses) BatchSetUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BatchSetUserResponse, error) {
	rsp, err := c.BatchSetUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchSetUserResponse(rsp)
}

func (c *ClientWithResponses) BatchSetUserWithResponse(ctx context.Context, body BatchSetUserJSONRequestBody, reqEditors ...RequestEditorFn) (*BatchSetUserResponse, error) {
	rsp, err := c.BatchSetUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBatchSetUserResponse(rsp)
}

// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *ClientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

func (c *ClientWithResponses) CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

// QueryUserWithBodyWithResponse request with arbitrary body returning *QueryUserResponse
func (c *ClientWithResponses) QueryUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*QueryUserResponse, error) {
	rsp, err := c.QueryUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUserResponse(rsp)
}

func (c *ClientWithResponses) QueryUserWithResponse(ctx context.Context, body QueryUserJSONRequestBody, reqEditors ...RequestEditorFn) (*QueryUserResponse, error) {
	rsp, err := c.QueryUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryUserResponse(rsp)
}

// DeleteUserWithResponse request returning *DeleteUserResponse
func (c *ClientWithResponses) DeleteUserWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUser(ctx, docID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, docID DocID, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, docID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// EditUserWithBodyWithResponse request with arbitrary body returning *EditUserResponse
func (c *ClientWithResponses) EditUserWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditUserResponse, error) {
	rsp, err := c.EditUserWithBody(ctx, docID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditUserResponse(rsp)
}

func (c *ClientWithResponses) EditUserWithResponse(ctx context.Context, docID DocID, body EditUserJSONRequestBody, reqEditors ...RequestEditorFn) (*EditUserResponse, error) {
	rsp, err := c.EditUser(ctx, docID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditUserResponse(rsp)
}

// SetUserWithBodyWithResponse request with arbitrary body returning *SetUserResponse
func (c *ClientWithResponses) SetUserWithBodyWithResponse(ctx context.Context, docID DocID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetUserResponse, error) {
	rsp, err := c.SetUserWithBody(ctx, docID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetUserResponse(rsp)
}

func (c *ClientWithResponses) SetUserWithResponse(ctx context.Context, docID DocID, body SetUserJSONRequestBody, reqEditors ...RequestEditorFn) (*SetUserResponse, error) {
	rsp, err := c.SetUser(ctx, docID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetUserResponse(rsp)
}

// GetSchemasWithResponse request returning *GetSchemasResponse
func (c *ClientWithResponses) GetSchemasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSchemasResponse, error) {
	rsp, err := c.GetSchemas(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchemasResponse(rsp)
}

// GetAccountSchemaWithResponse request returning *GetAccountSchemaResponse
func (c *ClientWithResponses) GetAccountSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountSchemaResponse, error) {
	rsp, err := c.GetAccountSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountSchemaResponse(rsp)
}

// SetAccountSchemaWithBodyWithResponse request with arbitrary body returning *SetAccountSchemaResponse
func (c *ClientWithResponses) SetAccountSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetAccountSchemaResponse, error) {
	rsp, err := c.SetAccountSchemaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetAccountSchemaResponse(rsp)
}

func (c *ClientWithResponses) SetAccountSchemaWithResponse(ctx context.Context, body SetAccountSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*SetAccountSchemaResponse, error) {
	rsp, err := c.SetAccountSchema(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetAccountSchemaResponse(rsp)
}

// GetCdcSchemaWithResponse request returning *GetCdcSchemaResponse
func (c *ClientWithResponses) GetCdcSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCdcSchemaResponse, error) {
	rsp, err := c.GetCdcSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCdcSchemaResponse(rsp)
}

// SetCdcSchemaWithBodyWithResponse request with arbitrary body returning *SetCdcSchemaResponse
func (c *ClientWithResponses) SetCdcSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetCdcSchemaResponse, error) {
	rsp, err := c.SetCdcSchemaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetCdcSchemaResponse(rsp)
}

func (c *ClientWithResponses) SetCdcSchemaWithResponse(ctx context.Context, body SetCdcSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*SetCdcSchemaResponse, error) {
	rsp, err := c.SetCdcSchema(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetCdcSchemaResponse(rsp)
}

// GetMigrationSchemaWithResponse request returning *GetMigrationSchemaResponse
func (c *ClientWithResponses) GetMigrationSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMigrationSchemaResponse, error) {
	rsp, err := c.GetMigrationSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMigrationSchemaResponse(rsp)
}

// SetMigrationSchemaWithBodyWithResponse request with arbitrary body returning *SetMigrationSchemaResponse
func (c *ClientWithResponses) SetMigrationSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetMigrationSchemaResponse, error) {
	rsp, err := c.SetMigrationSchemaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetMigrationSchemaResponse(rsp)
}

func (c *ClientWithResponses) SetMigrationSchemaWithResponse(ctx context.Context, body SetMigrationSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*SetMigrationSchemaResponse, error) {
	rsp, err := c.SetMigrationSchema(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetMigrationSchemaResponse(rsp)
}

// GetTaskSchemaWithResponse request returning *GetTaskSchemaResponse
func (c *ClientWithResponses) GetTaskSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTaskSchemaResponse, error) {
	rsp, err := c.GetTaskSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTaskSchemaResponse(rsp)
}

// SetTaskSchemaWithBodyWithResponse request with arbitrary body returning *SetTaskSchemaResponse
func (c *ClientWithResponses) SetTaskSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetTaskSchemaResponse, error) {
	rsp, err := c.SetTaskSchemaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetTaskSchemaResponse(rsp)
}

func (c *ClientWithResponses) SetTaskSchemaWithResponse(ctx context.Context, body SetTaskSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*SetTaskSchemaResponse, error) {
	rsp, err := c.SetTaskSchema(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetTaskSchemaResponse(rsp)
}

// GetUserSchemaWithResponse request returning *GetUserSchemaResponse
func (c *ClientWithResponses) GetUserSchemaWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUserSchemaResponse, error) {
	rsp, err := c.GetUserSchema(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserSchemaResponse(rsp)
}

// SetUserSchemaWithBodyWithResponse request with arbitrary body returning *SetUserSchemaResponse
func (c *ClientWithResponses) SetUserSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetUserSchemaResponse, error) {
	rsp, err := c.SetUserSchemaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetUserSchemaResponse(rsp)
}

func (c *ClientWithResponses) SetUserSchemaWithResponse(ctx context.Context, body SetUserSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*SetUserSchemaResponse, error) {
	rsp, err := c.SetUserSchema(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetUserSchemaResponse(rsp)
}

// ParseBatchSetAccountResponse parses an HTTP response from a BatchSetAccountWithResponse call
func ParseBatchSetAccountResponse(rsp *http.Response) (*BatchSetAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchSetAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateAccountResponse parses an HTTP response from a CreateAccountWithResponse call
func ParseCreateAccountResponse(rsp *http.Response) (*CreateAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQueryAccountResponse parses an HTTP response from a QueryAccountWithResponse call
func ParseQueryAccountResponse(rsp *http.Response) (*QueryAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Page
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAccountResponse parses an HTTP response from a DeleteAccountWithResponse call
func ParseDeleteAccountResponse(rsp *http.Response) (*DeleteAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAccountResponse parses an HTTP response from a GetAccountWithResponse call
func ParseGetAccountResponse(rsp *http.Response) (*GetAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditAccountResponse parses an HTTP response from a EditAccountWithResponse call
func ParseEditAccountResponse(rsp *http.Response) (*EditAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSetAccountResponse parses an HTTP response from a SetAccountWithResponse call
func ParseSetAccountResponse(rsp *http.Response) (*SetAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBatchSetCdcResponse parses an HTTP response from a BatchSetCdcWithResponse call
func ParseBatchSetCdcResponse(rsp *http.Response) (*BatchSetCdcResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchSetCdcResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateCdcResponse parses an HTTP response from a CreateCdcWithResponse call
func ParseCreateCdcResponse(rsp *http.Response) (*CreateCdcResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCdcResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cdc
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQueryCdcResponse parses an HTTP response from a QueryCdcWithResponse call
func ParseQueryCdcResponse(rsp *http.Response) (*QueryCdcResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryCdcResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Page
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCdcResponse parses an HTTP response from a DeleteCdcWithResponse call
func ParseDeleteCdcResponse(rsp *http.Response) (*DeleteCdcResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCdcResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCdcResponse parses an HTTP response from a GetCdcWithResponse call
func ParseGetCdcResponse(rsp *http.Response) (*GetCdcResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCdcResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cdc
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditCdcResponse parses an HTTP response from a EditCdcWithResponse call
func ParseEditCdcResponse(rsp *http.Response) (*EditCdcResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditCdcResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cdc
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSetCdcResponse parses an HTTP response from a SetCdcWithResponse call
func ParseSetCdcResponse(rsp *http.Response) (*SetCdcResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetCdcResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cdc
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBatchSetMigrationResponse parses an HTTP response from a BatchSetMigrationWithResponse call
func ParseBatchSetMigrationResponse(rsp *http.Response) (*BatchSetMigrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchSetMigrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateMigrationResponse parses an HTTP response from a CreateMigrationWithResponse call
func ParseCreateMigrationResponse(rsp *http.Response) (*CreateMigrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMigrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Migration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQueryMigrationResponse parses an HTTP response from a QueryMigrationWithResponse call
func ParseQueryMigrationResponse(rsp *http.Response) (*QueryMigrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryMigrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Page
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteMigrationResponse parses an HTTP response from a DeleteMigrationWithResponse call
func ParseDeleteMigrationResponse(rsp *http.Response) (*DeleteMigrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMigrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMigrationResponse parses an HTTP response from a GetMigrationWithResponse call
func ParseGetMigrationResponse(rsp *http.Response) (*GetMigrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMigrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Migration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditMigrationResponse parses an HTTP response from a EditMigrationWithResponse call
func ParseEditMigrationResponse(rsp *http.Response) (*EditMigrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditMigrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Migration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSetMigrationResponse parses an HTTP response from a SetMigrationWithResponse call
func ParseSetMigrationResponse(rsp *http.Response) (*SetMigrationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetMigrationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Migration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBatchSetTaskResponse parses an HTTP response from a BatchSetTaskWithResponse call
func ParseBatchSetTaskResponse(rsp *http.Response) (*BatchSetTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchSetTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateTaskResponse parses an HTTP response from a CreateTaskWithResponse call
func ParseCreateTaskResponse(rsp *http.Response) (*CreateTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQueryTaskResponse parses an HTTP response from a QueryTaskWithResponse call
func ParseQueryTaskResponse(rsp *http.Response) (*QueryTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Page
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteTaskResponse parses an HTTP response from a DeleteTaskWithResponse call
func ParseDeleteTaskResponse(rsp *http.Response) (*DeleteTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTaskResponse parses an HTTP response from a GetTaskWithResponse call
func ParseGetTaskResponse(rsp *http.Response) (*GetTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditTaskResponse parses an HTTP response from a EditTaskWithResponse call
func ParseEditTaskResponse(rsp *http.Response) (*EditTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSetTaskResponse parses an HTTP response from a SetTaskWithResponse call
func ParseSetTaskResponse(rsp *http.Response) (*SetTaskResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetTaskResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Task
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBatchSetUserResponse parses an HTTP response from a BatchSetUserWithResponse call
func ParseBatchSetUserResponse(rsp *http.Response) (*BatchSetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BatchSetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func ParseCreateUserResponse(rsp *http.Response) (*CreateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseQueryUserResponse parses an HTTP response from a QueryUserWithResponse call
func ParseQueryUserResponse(rsp *http.Response) (*QueryUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Page
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUserResponse parses an HTTP response from a DeleteUserWithResponse call
func ParseDeleteUserResponse(rsp *http.Response) (*DeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseEditUserResponse parses an HTTP response from a EditUserWithResponse call
func ParseEditUserResponse(rsp *http.Response) (*EditUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSetUserResponse parses an HTTP response from a SetUserWithResponse call
func ParseSetUserResponse(rsp *http.Response) (*SetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSchemasResponse parses an HTTP response from a GetSchemasWithResponse call
func ParseGetSchemasResponse(rsp *http.Response) (*GetSchemasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchemasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAccountSchemaResponse parses an HTTP response from a GetAccountSchemaWithResponse call
func ParseGetAccountSchemaResponse(rsp *http.Response) (*GetAccountSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSetAccountSchemaResponse parses an HTTP response from a SetAccountSchemaWithResponse call
func ParseSetAccountSchemaResponse(rsp *http.Response) (*SetAccountSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetAccountSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCdcSchemaResponse parses an HTTP response from a GetCdcSchemaWithResponse call
func ParseGetCdcSchemaResponse(rsp *http.Response) (*GetCdcSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCdcSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSetCdcSchemaResponse parses an HTTP response from a SetCdcSchemaWithResponse call
func ParseSetCdcSchemaResponse(rsp *http.Response) (*SetCdcSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetCdcSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMigrationSchemaResponse parses an HTTP response from a GetMigrationSchemaWithResponse call
func ParseGetMigrationSchemaResponse(rsp *http.Response) (*GetMigrationSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMigrationSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSetMigrationSchemaResponse parses an HTTP response from a SetMigrationSchemaWithResponse call
func ParseSetMigrationSchemaResponse(rsp *http.Response) (*SetMigrationSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetMigrationSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTaskSchemaResponse parses an HTTP response from a GetTaskSchemaWithResponse call
func ParseGetTaskSchemaResponse(rsp *http.Response) (*GetTaskSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTaskSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSetTaskSchemaResponse parses an HTTP response from a SetTaskSchemaWithResponse call
func ParseSetTaskSchemaResponse(rsp *http.Response) (*SetTaskSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetTaskSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUserSchemaResponse parses an HTTP response from a GetUserSchemaWithResponse call
func ParseGetUserSchemaResponse(rsp *http.Response) (*GetUserSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSetUserSchemaResponse parses an HTTP response from a SetUserSchemaWithResponse call
func ParseSetUserSchemaResponse(rsp *http.Response) (*SetUserSchemaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetUserSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
