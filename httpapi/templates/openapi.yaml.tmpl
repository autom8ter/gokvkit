openapi: 3.0.2
info:
  version: {{ .version }}
  title: {{ .title }}
  description: |
    {{ .description | indent 4 }}
tags: {{ range .collections }}
  - name: {{ title .collection }}
    description: {{ title .collection }} operations {{end}}
{{ if .servers}}
servers: {{ range .servers }}
  - url: {{ .server }}
{{end}} {{end}}
paths:
  /schema:
    get:
      tags:
        - schema
      summary: get collection schemas
      operationId: getSchemas
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid schema
        '500':
          description: Internal Server Error
{{- range .collections }}
  # {{ .collection }} collection endpoints
  /schema/{{ .collection }}:
    get:
      tags:
        - {{ title .collection }}
        - schema
      summary: get {{ title .collection }} collection schemas
      operationId: get{{ title .collection }}Schema
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid schema
        '500':
          description: Internal Server Error
    put:
      tags:
        - {{ title .collection }}
      summary: set {{ title .collection }} collection schemas
      operationId: set{{ title .collection }}Schema
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid schema
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
  /collections/{{ .collection }}:
    post:
      tags:
        - {{ title .collection }}
      summary: create a {{ title .collection }} document
      description: This creates a document in the {{ title .collection }} collection
      operationId: create{{ title .collection }}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/{{ title .collection }}"
        '400':
          description: Invalid document
        '404':
          description: Not found
        '500':
          description: Internal Server Error
      
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/{{ title .collection }}'
        required: true
  /collections/{{ .collection }}/{docID}:
    get:
      tags:
        - {{ title .collection }}
      summary: get a {{ title .collection }} document by id
      description: This retrieves an existing document in the {{ title .collection }} collection by id
      operationId: get{{ title .collection }}
      parameters:
        - $ref: "#/components/parameters/DocID"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/{{ title .collection }}"
        '400':
          description: Invalid request
        '404':
          description: Not found
        '500':
          description: Internal Server Error
    delete:
      tags:
        - {{ title .collection }}
      summary: delete a {{ title .collection }} document by id
      description: This deletes an existing document in the {{ title .collection }} collection by id
      operationId: delete{{ title .collection }}
      parameters:
        - $ref: "#/components/parameters/DocID"
      responses:
        '200':
          description: OK
        '400':
          description: Invalid request
        '404':
          description: Not found
        '500':
          description: Internal Server Error
    put:
      tags:
        - {{ title .collection }}
      summary: update a {{ title .collection }} document
      description: This updates an existing document in the {{ title .collection }} collection
      operationId: set{{ title .collection }}
      parameters:
        - $ref: "#/components/parameters/DocID"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/{{ title .collection }}"
        '400':
          description: Invalid update
        '404':
          description: Not found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/{{ title .collection }}'
        required: true
    patch:
      tags:
        - {{ title .collection }}
      summary: edit fields of an {{ title .collection }} document
      description: This edits a document in the {{ title .collection }} collection
      operationId: edit{{ title .collection }}
      parameters:
        - $ref: "#/components/parameters/DocID"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/{{ title .collection }}"
        '400':
          description: Invalid document
        '404':
          description: Not found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
  /collections/{{ .collection }}/_/query:
    post:
      tags:
        - {{ title .collection }}
      summary: query {{ title .collection }} collection
      description: This operation queries documents in the {{ title .collection }} collection
      operationId: query{{ title .collection }}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Page"
        '400':
          description: Invalid {{ title .collection }} Query
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Query'
        required: true
  /collections/{{ .collection }}/_/batch:
    put:
      tags:
        - {{ title .collection }}
      summary: batch set 1-many {{ title .collection }} documents
      description: This set 1-many documents in the {{ title .collection }} collection
      operationId: batchSet{{ title .collection }}
      responses:
        '200':
          description: OK
        '400':
          description: Invalid document(s)
        '404':
          description: Not found
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/{{ title .collection }}'
        required: true
{{end}}
components:
  parameters:
    DocID:
      name: docid
      in: path
      required: true
      schema:
        type: string
  schemas:
    Query:
      type: object
      description: Query is a query against a collection of documents
      required:
        - select
      properties:
        select:
          type: array
          items:
            type: object
            description: select is a list of fields to select from each record in the datbase(optional)
            properties:
              field:
                type: string
                description: the select's field
              aggregate:
                type: string
                description: an aggregate function to apply against the field
                enum:
                  - sum
                  - count
                  - max
                  - min
              function:
                type: string
                description: a function to apply against the field
                enum:
                  - toLower
                  - toUpper
              as:
                type: string
                description: as is outputs the value of the field as an alias
            required:
              - field
        groupBy:
          type: array
          items:
            type: string
        where:
          type: array
          items:
            type: object
            description: where is a filter applied against a query
            properties:
              field:
                type: string
              op:
                type: string
                enum:
                  - eq
                  - neq
                  - gt
                  - gte
                  - lt
                  - lte
                  - in
                  - contains
              value: {}
            required:
              - field
              - op
              - value
        orderBy:
          type: array
          items:
            type: object
            description: orderBy orders results by a field and a direction
            properties:
              field:
                type: string
              direction:
                type: string
                enum:
                  - asc
                  - desc
            required:
              - field
              - direction
        page:
          type: integer
          minimum: 0
        limit:
          type: integer
          minimum: 0
    Page:
      type: object
      description: Page is a list of documents returned from a query
      required:
        - documents
        - next_page
        - count
      properties:
        documents:
          type: array
          items:
            type: object
        next_page:
          type: integer
          minimum: 0
        count:
          type: integer
          minimum: 0
{{- range .collections }}
    {{ title .collection }}: {{ .schema | nindent 6 }}
{{end}}